"""
Base Query object exposed by GraphQL for the MQL Server

Each field defined below is accessible by the API, by calling the equivalent resolver.
"""
type Query {
  version: String
  boom(raise_: Boolean): Boolean
  mqlQuery(
    id: ID!

    """
    Used for marking retries, optionally pass param to track attempt number.
    """
    attemptNum: Int
  ): MqlQuery
  sourceQuery(id: ID!): String
  materializations(modelKey: ModelKeyInput): [Materialization!]
  metrics(modelKey: ModelKeyInput): [Metric!]
  metricByName(modelKey: ModelKeyInput, name: String!): Metric
  measures(modelKey: ModelKeyInput): [Measure!]
  measureByName(modelKey: ModelKeyInput, name: String!): Measure
  dimensionNamesForMetrics(modelKey: ModelKeyInput, metricNames: [String], excludeProperties: [DimensionProperty]): [String]
  dimensionsForMetrics(modelKey: ModelKeyInput, metricNames: [String], excludeProperties: [DimensionProperty]): Dimensions
  dimensionNamesForMetricsMultihop(modelKey: ModelKeyInput, metricNames: [String]): [String] @deprecated(reason: "Use `dimensionNamesForMetrics`.")
  dimensionsForMetricsMultihop(modelKey: ModelKeyInput, metricNames: [String]): Dimensions @deprecated(reason: "Use `dimensionsForMetrics`.")
  dimensions(modelKey: ModelKeyInput): [Dimension!]
  primaryTimeDimension(modelKey: ModelKeyInput): Dimension
  maxGranularityForMetrics(metricNames: [String]!, modelKey: ModelKeyInput): TimeGranularity
  queryableGranularitiesForMetrics(metricNames: [String]!, modelKey: ModelKeyInput, pctChange: PercentChange): [TimeGranularity]
  queries(activeOnly: Boolean, status: MqlQueryStatus, metricNames: [String], dateRangeStart: Date, dateRangeEnd: Date, minExecutionSeconds: Float, maxExecutionSeconds: Float, userIds: [Int], limit: Int, offset: Int): [MqlQuery]
  healthReport: [MqlServerHealthItem]
  validations(modelKey: ModelKeyInput): Validations
  flagIsEnabled(flag: String!): Boolean
  dbtModelMeta(dataSourceNames: [String]): [DbtModelMeta]
}

"""
The MQL Query class is used to access the output of an MQL Query.

Since queries are processed asynchronously, the status field indicates whether results are available.
Once complete, the results are available either in a strongly typed format, `result`, or
a generic, tabular format suitable for constructing a Pandas DataFrame.
"""
type MqlQuery {
  """
  Query IDs are disposable, as query results expire in a short period of time. It is expected that queries are created, and then results are retrieved immediately upon query completion.
  """
  id: ID

  """The model key used when creating the query"""
  modelKey: ModelKey

  """ID of the user who executed the query"""
  userId: Int
  metrics: [String!]
  dimensions: [String!]

  """The status of the requested query"""
  status: MqlQueryStatus
  result: [MqlQueryResultSeries!]

  """
  The Tabular Results are Base 64-encoded JSON of a subset of rows from the query results Data Frame.
  """
  resultTabular(cursor: Int, orient: PandasJsonOrient, paginate: Boolean): MqlQueryTabularResult
  totalResultRows: Int

  """
  The completion time for the query result. If using the MQL result cache, helps check when the latest cache fill occurred.
  """
  completedAt: DateTime
  resultTableSchema: String
  resultTableName: String
  resultSource: QueryResultSource
  resultPrimaryTimeGranularity: TimeGranularity

  """Time this query was submitted to the MQL server"""
  createdAt: DateTime

  """Time the MQL Server start query execution"""
  startedAt: DateTime
  sql: String
  error: String
  errorTraceback: String
  userFriendlyErrorType: MqlQueryUserFriendlyErrorType
  logs: String
  logsByLine(fromLine: Int, maxLines: Int): String
  chartValueMin: Float
  chartValueMax: Float
  latestResultValues: [QueryResultValue]
  whereConstraint: String
  requestedGranularity: TimeGranularity
  groupBy: [String]
  maxDimensionValues: Int
  constraint: Constraint
  timeComparison: PercentChange
  trimIncompletePeriods: Boolean
  timeConstraint: TimeConstraint
  numPostprocessedResults: Int
  dbId: Int
  warnings: [String]
  availableChartTypes: [ChartType]
}

"""API Output definition for a Model Key"""
type ModelKey {
  organization: String!
  repo: String!
  branch: String!
  commit: String!
}

"""The status of queries submitted for execution in the query manager."""
enum MqlQueryStatus {
  PENDING
  RUNNING
  SUCCESSFUL
  FAILED
  UNHANDLED_EXCEPTION
  UNKNOWN
}

"""This is the canonical shape for chart-ready data."""
type MqlQueryResultSeries {
  """
  For queries without dimensional cuts, series_value will be `ALL`. For queries with dimensional cuts, one of these Result will be returned per dimension
  """
  seriesValue: String
  data: [ResultDatum!]
  isOtherCol: Boolean
  value: Float
  delta: Float
  pctChange: GenericScalar
  xDate: DateTime
}

"""This interface is used to describe any type of MQL Query result data"""
interface ResultDatum {
  y: GenericScalar
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""
Wrapper around Graphene DateTime that is capable of handling string dates
"""
scalar DateTime

"""Object type for Tabular data used to populate Pandas DataFrames"""
type MqlQueryTabularResult {
  """
  Base-64 encoded Pandas DataFrame dumped to JSON using the specified orient.
  """
  data: String

  """
  If present, the cursor indicates the value to pass for the next batch of records. If null, all results have been transferred.
  """
  nextCursor: String
}

"""
Determines the format of the JSON output for the DataFrame

    See https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html
    
"""
enum PandasJsonOrient {
  SPLIT
  RECORDS
  INDEX
  COLUMNS
  VALUES
  TABLE
}

"""
Different ways that a query result could have been computed or retrieved.
"""
enum QueryResultSource {
  DYNAMIC_CACHE
  DW_MATERIALIZATION
  FAST_CACHE
  METRICFLOW
  NOT_APPLICABLE
  NOT_SPECIFIED
}

"""
For time dimensions, the smallest possible difference between two time values.

    Needed for calculating adjacency when merging 2 different time ranges.
    
"""
enum TimeGranularity {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

"""User friendly error types to return with MqlQuery"""
enum MqlQueryUserFriendlyErrorType {
  DB_ERROR
  UNABLE_TO_SATISFY_QUERY_ERROR
  UNKNOWN
}

"""Represents a row of query results for one pivot value."""
type QueryResultValue {
  date: DateTime
  label: String
  value: Float
}

"""Represents a where constraint used in a query."""
type Constraint {
  constraint: SingleConstraint
  And: [SingleConstraint!]
}

"""Actual `where` clauses to be applied"""
type SingleConstraint {
  constraintType: AtomicConstraintType
  dimensionName: String
  values: [String]
  start: String
  stop: String
}

"""Current possible values for constraints"""
enum AtomicConstraintType {
  SET
  RANGE
}

"""An enumeration."""
enum PercentChange {
  DOD
  WOW
  MOM
  QOQ
  YOY
  DATE_RANGE
}

"""Represents a time range with inclusive start / stop endpoints."""
type TimeConstraint {
  dimensionName: String
  timeFormat: String
  start: String
  stop: String
  timeGranularity: TimeGranularity
}

"""An enumeration."""
enum ChartType {
  LINE_CHART
  AREA_CHART
  AREA_CHART_SHARE_OF
  BAR_CHART_STACKED
  BAR_CHART_GROUPED
  BAR_CHART_STACKED_SHARE_OF
  BIG_NUMBER
  TABLE
}

type Materialization {
  name: String!
  metrics: [String!]
  dimensions: [String!]
  destinationTable: String
}

"""API Input definition for a Model Key"""
input ModelKeyInput {
  organization: String!
  repo: String!
  branch: String!
  commit: String!
}

type Metric {
  name: String!
  measures: [String!]
  typeParams: MetricTypeParams!
  type: String!
  constraint: String
  dimensions: [String!]
  dimensionObjects(modelKey: ModelKeyInput): [Dimension!]
  dimensionValues(modelKey: ModelKeyInput, dimensionName: String!, startTime: String, endTime: String, allowDynamicCache: Boolean, pageNumber: Int, pageSize: Int, searchStr: String): [String]
  totalDimensionValues(modelKey: ModelKeyInput, dimensionName: String!, startTime: String, endTime: String, allowDynamicCache: Boolean, searchStr: String): Int
  maxGranularity(modelKey: ModelKeyInput): TimeGranularity
  newDataIsAvailable(afterDatetime: DateTime!, modelKey: ModelKeyInput): Boolean
  canLimitDimensionValues(modelKey: ModelKeyInput): Boolean
}

"""
Metric Type Params. For measures references in type_params config, see the Metric object.
"""
type MetricTypeParams {
  numerator: String
  denominator: String
  expr: String
  window: String
}

type Dimension {
  name: String!
  elementName: String!
  identifierName: String
  identifierNames: [String]
  type: DimensionTypeForDescription
  isPrimaryTime: Boolean
  timeGranularity: TimeGranularity
  values: [String!]
  cardinality: Int
}

"""Describes the type of dimension in QueryableDimensionDescription."""
enum DimensionTypeForDescription {
  CATEGORICAL
  TIME
}

type Measure {
  name: String!
  dataSources: [String!]
}

"""An enumeration."""
enum DimensionProperty {
  LOCAL
  LOCAL_LINKED
  JOINED
  MULTI_HOP
  DERIVED_TIME_GRANULARITY
  INTERSECTED
}

type Dimensions {
  localDimensions(modelKey: ModelKeyInput, metricNames: [String]): [Dimension]
  nonLocalDimensions(modelKey: ModelKeyInput, metricNames: [String]): [Dimension]
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type MqlServerHealthItem {
  name: String!
  status: String!
  errorMessage: String
}

type Validations {
  modelKey: ModelKey
  allIssues: [String!]
  dataSourceIssues: [String!]
  metricIssues: [String!]
  dimensionIssues: [String!]
}

"""The meta information we track of dbt models"""
type DbtModelMeta {
  timestamp: DateTime
  schema: String!
  model: String!
  user: String
  target: String
  isFullRefresh: Boolean
  gitSha: String
  projectId: String
  projectName: String
  jobId: String
  runId: String
}

"""Base mutation object exposed by GraphQL."""
type Mutation {
  createMqlMaterializationNew(input: CreateMqlMaterializationNewInput!): CreateMqlMaterializationNewPayload
  createMqlDropMaterialization(input: CreateMqlDropMaterializationInput!): CreateMqlDropMaterializationPayload

  """
  This mutation is used to initiate an MQL Query.
  
  The primary return value is a queryId that can be used to fetch the query status, errors, and results.
  The full query object is also returned in case we have a result available synchronously (stored in the result cache).
  """
  createMqlQuery(input: CreateMqlQueryInput!): CreateMqlQueryPayload

  """
  Initiate an MQL Query based on just the DB id. We'll build out the parameters from the DB record.
  """
  createMqlQueryFromDbId(input: CreateMqlQueryFromDbIdInput!): CreateMqlQueryFromDbIdPayload
  materialize(asTable: String, cacheMode: CacheMode, groupBy: [String!], metrics: [String!], modelKey: ModelKeyInput, where: String): Materialize @deprecated(reason: "Moving to async implementation (CreateMqlMaterializationNew)")

  """
  Drop the MQL dynamic cache. Please avoid doing this unless there's a cache corruption issue.
  """
  dropCache(confirm: String): DropCache

  """
  Rewrites SQL containing an MQL(...) function invocation by expanding into generated SQL
  """
  rewriteMqlSql(sql: String!): RewriteMqlSql

  """
  For metric, get latest value, percent change from the previous granularity period, and delta between the two.
  """
  queryLatestMetricChange(input: QueryLatestMetricChangeInput!): QueryLatestMetricChangePayload

  """
  For time period, get latest value, percent change from the previous granularity period, and delta between the two.
  """
  queryMetricChange(input: QueryMetricChangeInput!): QueryMetricChangePayload

  """
  Get percent change for given metric from start to end of date range (assuming daily granularity).
  """
  pctChangeOverRange(input: PctChangeOverRangeInput!): PctChangeOverRangePayload

  """Invalidate cache for a given metric."""
  invalidateCacheForMetric(metricName: String!, modelKey: ModelKeyInput): InvalidateCacheForMetric
}

type CreateMqlMaterializationNewPayload {
  id: ID
  clientMutationId: String
}

input CreateMqlMaterializationNewInput {
  modelKey: ModelKeyInput
  materializationName: String
  startTime: String
  endTime: String
  outputTable: String
  force: Boolean = false
  clientMutationId: String
}

type CreateMqlDropMaterializationPayload {
  id: ID
  clientMutationId: String
}

input CreateMqlDropMaterializationInput {
  modelKey: ModelKeyInput
  materializationName: String
  startTime: String
  endTime: String
  clientMutationId: String
}

"""
This mutation is used to initiate an MQL Query.

The primary return value is a queryId that can be used to fetch the query status, errors, and results.
The full query object is also returned in case we have a result available synchronously (stored in the result cache).
"""
type CreateMqlQueryPayload {
  id: ID!
  query: MqlQuery
  clientMutationId: String
}

input CreateMqlQueryInput {
  modelKey: ModelKeyInput
  metrics: [String!]
  groupBy: [String!]
  where: ConstraintInput
  whereConstraint: String
  timeConstraint: String

  """
  Optionally, provide a granularity for the primary time dimension in the returned results.
  """
  timeGranularity: TimeGranularity
  order: [String!]

  """
  Integer, '-1', or 'inf' to represent the number of rows of a query to return input field
  """
  limit: LimitInput

  """
  Set to True if you want to automatically add a default Time Series dimension to the query. This is useful for plotting the metric in time series without needing to know the time dimension up front.
  """
  addTimeSeries: Boolean

  """
  Optionally, provide a cache mode to instruct the query engine how/whether to check the cache for data.
  """
  cacheMode: CacheMode
  useResultCache: Boolean
  resultFormat: ResultFormat
  asTable: String

  """
  Calculate percentage changed from current time period to previous time period. Must also select granularity.
  """
  pctChange: PercentChange
  startTime: String
  endTime: String

  """
  If granularity is applied, trim start/end periods with incomplete date ranges or data.
  """
  trimIncompletePeriods: Boolean

  """
  Limit time dimension to a specific number of days, whether or not those days have data.
  """
  daysLimit: Int

  """
  Indicates if query can utilize Transform dynamic cache. May be set to False for expensive queries that should only be run if pre-materialized
  """
  allowDynamicCache: Boolean

  """
  Limit queries to a maximum number of dimension values. Primarily make charts readable.
  """
  maxDimensionValues: Int

  """
  Include date boundaries in postprocessed results, even if there is no result data for those dates.
  """
  includeDateBoundaries: Boolean

  """
  Used for marking retries, optionally pass param to track attempt number.
  """
  attemptNum: Int
  clientMutationId: String
}

"""
Container class for inputs to allow for and/or wrappers on the `where` clause
"""
input ConstraintInput {
  And: [SingleConstraintInput!]
  constraint: SingleConstraintInput
}

"""Actual `where` clauses to be applied"""
input SingleConstraintInput {
  constraintType: AtomicConstraintType
  dimensionName: String
  values: [String]
  start: String
  stop: String
}

"""
Limit is a GraphQL Scalar that can take in inf or positive integers.

This class helps us normalize a API limit input into the Optional[int] type expected by library code
"""
scalar LimitInput

"""
Options for the SemanticLayer cache.

    Tables in a specified schema in the same data warehouse contain measure / dimension combinations that can be used to
    speed up queries for different measure / dimension combinations.
    
"""
enum CacheMode {
  READ
  READWRITE
  WRITE
  IGNORE
}

"""An enumeration."""
enum ResultFormat {
  TFD
}

"""
Initiate an MQL Query based on just the DB id. We'll build out the parameters from the DB record.
"""
type CreateMqlQueryFromDbIdPayload {
  id: ID!
  query: MqlQuery
  clientMutationId: String
}

input CreateMqlQueryFromDbIdInput {
  """ID for query logged to DB."""
  dbId: Int!

  """
  Used for marking retries, optionally pass param to track attempt number.
  """
  attemptNum: Int
  clientMutationId: String
}

type Materialize {
  schema: String
  table: String
}

"""
Drop the MQL dynamic cache. Please avoid doing this unless there's a cache corruption issue.
"""
type DropCache {
  success: Boolean
}

"""
Rewrites SQL containing an MQL(...) function invocation by expanding into generated SQL
"""
type RewriteMqlSql {
  resultSql: String
}

"""
For metric, get latest value, percent change from the previous granularity period, and delta between the two.
"""
type QueryLatestMetricChangePayload {
  id: ID!
  query: MqlQuery
  clientMutationId: String
}

input QueryLatestMetricChangeInput {
  metricName: String!

  """
  Calculate percentage changed from the latest time period to previous time period.
  """
  pctChange: PercentChange
  clientMutationId: String
}

"""
For time period, get latest value, percent change from the previous granularity period, and delta between the two.
"""
type QueryMetricChangePayload {
  id: ID!
  query: MqlQuery
  clientMutationId: String
}

input QueryMetricChangeInput {
  metricName: String!
  timeConstraint: String
  clientMutationId: String
}

"""
Get percent change for given metric from start to end of date range (assuming daily granularity).
"""
type PctChangeOverRangePayload {
  id: ID!
  query: MqlQuery
  clientMutationId: String
}

input PctChangeOverRangeInput {
  metricName: String!
  startTime: String!
  endTime: String!
  clientMutationId: String
}

"""Invalidate cache for a given metric."""
type InvalidateCacheForMetric {
  success: String
}

"""
MQL Query Result Data are expected to be plotted on a time series so this is the most common result type
"""
type TimeSeriesDatum implements ResultDatum {
  y: GenericScalar
  xDate: DateTime!
}
