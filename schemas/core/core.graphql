"""
Base Query object exposed by GraphQL.

Each field defined below is accessible by the API, by calling the equivalent resolver.
"""
type Query {
  auth0Profile(auth0Id: String!): Auth0Profile
  mqlServerUrl: String
  latestMqlServer: ServiceRelease
  latestAvaticaServer: ServiceRelease
  myOrganization: Organization
  myUser: User
  allFeatures(searchStr: String, searchColumns: [FeatureStrColumn], pageNumber: Int, pageSize: Int, orderBy: FeatureOrderBy, desc: Boolean): [Feature]
  allOrganizations(searchStr: String, searchColumns: [OrganizationStrColumn], pageNumber: Int, pageSize: Int, orderBy: OrganizationOrderBy, desc: Boolean): [Organization]
  totalFeatures: Int
  totalOrganizations: Int
  organizationTest(id: ID!): Organization
  featureTest(id: ID!): Feature
  allMetricFilters: GenericScalar
}

"""A wrapper for the response we get from Auth0's user profile API"""
type Auth0Profile {
  picture: String
  lastIp: String
  lastLogin: DateTime
  loginsCount: Int
  blocked: Boolean
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
This is the externally-facing Graphene object representing the available MQL server download.

TODO: There's likely a simple way to merge these two objects together
"""
type ServiceRelease {
  serviceName: String
  version: String
  downloadUrl: String
  versionHash: String
}

type Organization {
  id: ID!
  name: String!
  domain: String
  createdAt: DateTime
  deactivatedAt: DateTime
  shardId: Int!
  logoUrl: String
  primaryConfigRepo: String!
  primaryConfigBranch: String!
  mqlServerUrl: String
  sourceControlUrl: String
  mqlServerLogs: String
  updatedAt: DateTime
  slug: String
  isHosted: Boolean!
  users(activeOnly: Boolean, searchStr: String, searchColumns: [UserStrColumn], pageNumber: Int, pageSize: Int, orderBy: UserOrderBy, desc: Boolean): [User]
  mqlServers(searchStr: String, searchColumns: [OrgMqlServerStrColumn], pageNumber: Int, pageSize: Int, orderBy: OrgMqlServerOrderBy, desc: Boolean): [OrgMqlServer]
  models(id: ID): [Model]
  orgMetrics: [OrgMetric]
  mqlHeartbeats: [MqlHeartbeat]
  currentModel: [Model]
  teams(searchStr: String, searchColumns: [TeamStrColumn], pageNumber: Int, pageSize: Int, orderBy: TeamOrderBy, desc: Boolean): [Team]
  apiKeys: [ApiKey]
  metricViews: [MetricView]
  savedQueries(searchStr: String, searchColumns: [SavedQueryStrColumn], pageNumber: Int, pageSize: Int, orderBy: SavedQueryOrderBy, desc: Boolean): [SavedQuery]
  teamViews: [TeamView]
  dashboards: [Dashboard]
  metricCollections(searchStr: String, searchColumns: [MetricCollectionStrColumn], pageNumber: Int, pageSize: Int, orderBy: MetricCollectionOrderBy, desc: Boolean): [MetricCollection]
  questions(searchStr: String, searchColumns: [QuestionStrColumn], pageNumber: Int, pageSize: Int, orderBy: QuestionOrderBy, desc: Boolean): [Question]
  question(id: ID!): Question
  annotations(searchStr: String, searchColumns: [AnnotationStrColumn], pageNumber: Int, pageSize: Int, orderBy: AnnotationOrderBy, desc: Boolean): [Annotation]
  recentQuestions(searchStr: String, searchColumns: [QuestionStrColumn], pageNumber: Int, pageSize: Int, orderBy: QuestionOrderBy, desc: Boolean): [Question]
  recentAnnotations(searchStr: String, searchColumns: [AnnotationStrColumn], pageNumber: Int, pageSize: Int, orderBy: AnnotationOrderBy, desc: Boolean): [Annotation]
  totalQuestions: Int
  totalAnnotations: Int
  metrics(names: [String], tiers: [MetricTier], types: [MetricType], searchStr: String, searchColumns: [MetricVersionStrColumn], pageNumber: Int, pageSize: Int, orderBy: MetricVersionOrderBy, desc: Boolean): [Metric]
  totalMetrics: Int
  latestMqlHeartbeat: MqlHeartbeat
  totalUsers: Int
  totalTeams: Int
  mqlServer(id: ID!): OrgMqlServer
  totalMqlServers: Int
  metric(name: String!): Metric
  team(slug: String!): Team
  dashboard(id: ID!): Dashboard
  savedQuery(id: ID!): SavedQuery
  metricCollection(slug: String!): MetricCollection
  totalMetricCollections: Int
  totalSavedQueries: Int
  totalActiveFeatures: Int
  activeFeatures: [Feature]
}

type User {
  id: ID!
  organizationId: Int!
  auth0Id: String!
  userName: String!
  email: String!
  createdAt: DateTime
  updatedAt: DateTime
  deactivatedAt: DateTime
  avatarUrl: String
  primaryDashboardId: Int
  dateCreate: Int
  dateDeactivate: Int
  roles: [UserRole]
  prefs: [UserPref]
  activeUserRoles: [UserRole]
  teams(isAdminOnly: Boolean, searchStr: String, searchColumns: [TeamStrColumn], pageNumber: Int, pageSize: Int, orderBy: TeamOrderBy, desc: Boolean): [Team]
  teamMemberships: [TeamMember]
  dashboards: [Dashboard]
  primaryDashboard: Dashboard
  apiKeys(activeOnly: Boolean, searchStr: String, searchColumns: [ApiKeyStrColumn], pageNumber: Int, pageSize: Int, orderBy: ApiKeyOrderBy, desc: Boolean): [ApiKey]
  savedQueries(searchStr: String, searchColumns: [SavedQueryStrColumn], pageNumber: Int, pageSize: Int, orderBy: SavedQueryOrderBy, desc: Boolean): [SavedQuery]
  organization: Organization
  teamViews: [TeamView]
  metricCollections(searchStr: String, searchColumns: [MetricCollectionStrColumn], pageNumber: Int, pageSize: Int, orderBy: MetricCollectionOrderBy, desc: Boolean): [MetricCollection]
  mqlServerUrl: String
  activeRoles: [String]
  isAdmin: Boolean
  isOrgAdmin: Boolean
  auth0Profile: Auth0Profile
  totalTeams: Int
  totalApiKeys: Int
  totalSavedQueries: Int
  totalViewedMetrics: Int
  totalMetricCollections: Int
  viewedTeams(searchStr: String, searchColumns: [TeamStrColumn], pageNumber: Int, pageSize: Int, orderBy: TeamOrderBy, desc: Boolean): [Team]
  totalViewedTeams: Int
  viewedMetricCollections(searchStr: String, searchColumns: [MetricCollectionStrColumn], pageNumber: Int, pageSize: Int, orderBy: MetricCollectionOrderBy, desc: Boolean): [MetricCollection]
  totalViewedMetricCollections: Int
  totalActiveFeatures: Int
  viewedMetrics(searchStr: String, searchColumns: [MetricVersionStrColumn], pageNumber: Int, pageSize: Int, orderBy: MetricVersionOrderBy, desc: Boolean): [Metric]
  activeFeatures: [Feature]
}

type UserRole {
  id: ID!
  organizationId: Int!
  userId: Int!
  role: String!
  createdAt: DateTime
  updatedAt: DateTime
  removedAt: DateTime
  dateAdded: Int
  dateRemoved: Int
  organization: Organization
  user: User
}

type UserPref {
  id: ID!
  organizationId: Int!
  userId: Int!
  prefKey: String!
  prefValue: String!
  createdAt: DateTime
  updatedAt: DateTime
  dateCreate: Int
  organization: Organization
  user: User
}

type Team {
  id: ID!
  organizationId: Int!
  name: String!
  createdBy: Int
  slug: String!
  theme: String
  primaryDashboardId: Int
  featuredMetricCollectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deactivatedAt: DateTime
  description: String
  createdTs: Int
  deactivatedTs: Int
  createdByUser: User
  organization: Organization
  members(pageNumber: Int, pageSize: Int, orderBy: TeamMemberUserOrderBy, desc: Boolean): [TeamMember]
  adminMembers: [TeamMember]
  memberUsers: [User]
  dashboards: [Dashboard]
  primaryDashboard: Dashboard
  featuredMetricCollection: MetricCollection
  savedQueries(searchStr: String, searchColumns: [SavedQueryStrColumn], pageNumber: Int, pageSize: Int, orderBy: SavedQueryOrderBy, desc: Boolean): [SavedQuery]
  views: [TeamView]
  metricCollections(searchStr: String, searchColumns: [MetricCollectionStrColumn], pageNumber: Int, pageSize: Int, orderBy: MetricCollectionOrderBy, desc: Boolean): [MetricCollection]
  teamAdminIds: [Int]
  userIsTeamAdmin: Boolean
  totalMetrics: Int
  totalSavedQueries: Int
  totalMetricCollections: Int
  totalMembers: Int
  totalRecentViews: Int
  totalRecentViewsForUser: Int
  metrics(searchStr: String, searchColumns: [MetricVersionStrColumn], pageNumber: Int, pageSize: Int, orderBy: MetricVersionOrderBy, desc: Boolean): [Metric]
}

type TeamMember {
  id: ID!
  teamId: Int!
  organizationId: Int!
  userId: Int!
  isTeamAdmin: Boolean!
  joinedAt: DateTime
  joinedTs: Int
  organization: Organization
  team: Team
  user: User
}

"""An enumeration."""
enum TeamMemberUserOrderBy {
  TeamMember_ID
  TeamMember_TEAM_ID
  TeamMember_ORGANIZATION_ID
  TeamMember_USER_ID
  TeamMember_IS_TEAM_ADMIN
  TeamMember_JOINED_AT
  TeamMember_JOINED_TS
  User_ID
  User_ORGANIZATION_ID
  User_AUTH0_ID
  User_USER_NAME
  User_EMAIL
  User_CREATED_AT
  User_UPDATED_AT
  User_DEACTIVATED_AT
  User_AVATAR_URL
  User_PRIMARY_DASHBOARD_ID
  User_DATE_CREATE
  User_DATE_DEACTIVATE
}

type Dashboard {
  id: ID!
  title: String!
  dashboardLayout: String!
  organizationId: Int!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  organization: Organization
  sections: [DashboardSection]
}

type DashboardSection {
  id: ID!
  dashboardId: Int!
  dashboardSectionType: String!
  dashboard: Dashboard
  items: [DashboardItem]
}

type DashboardItem {
  id: ID!
  dashboardSectionId: Int!
  dashboardRenderableType: String!
  title: String
  subtitle: String
  userId: Int
  teamId: Int
  metricId: Int
  metricCollectionId: Int
  position: Int
  dashboardSection: DashboardSection
  metricCollection: MetricCollection
  team: Team
  user: User
}

type MetricCollection {
  id: ID!
  title: String!
  organizationId: Int!
  primaryDashboardId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  slug: String!
  createdBy: Int!
  ownerTeamId: Int
  description: String
  defaultEmphasis: Int
  createdByUser: User
  organization: Organization
  teamOwner: Team
  primaryDashboard: Dashboard
  items(pageNumber: Int, pageSize: Int, orderBy: MetricCollectionMetricOrderBy, desc: Boolean): [MetricCollectionMetric]
  views: [MetricCollectionView]
  totalItems: Int
  totalRecentViews: Int
  totalRecentViewsForUser: Int
  userCanEdit: Boolean
}

type MetricCollectionMetric {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  metricCollectionId: Int!
  metricId: Int!
  position: Int!
  emphasis: Int!
  metricCollection: MetricCollection
  orgMetric: OrgMetric
  metric: Metric
}

type OrgMetric {
  id: ID!
  createdAt: DateTime!
  organizationId: Int!
  name: String!
  organization: Organization
  userOwners: [MetricUserOwner]
  teamOwners: [MetricTeamOwner]
  savedQueries: [SavedQuery]
  versions: [Metric]
  metricAnnotations: [MetricAnnotation]
}

type MetricUserOwner {
  id: ID!
  organizationId: Int!
  orgMetricId: Int
  userId: Int!
  createdAt: DateTime
  user: User
  organization: Organization
}

type MetricTeamOwner {
  id: ID!
  organizationId: Int!
  metricName: String
  teamId: Int!
  createdTs: Int
  orgMetricId: Int
  createdAt: DateTime
  team: Team
  organization: Organization
}

type SavedQuery {
  id: ID!
  organizationId: Int!
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: Int!
  ownerTeamId: Int
  serializedQuery: GenericScalar
  createdByUser: User
  organization: Organization
  ownerTeam: Team
  orgMetrics: [OrgMetric]
  totalMetrics: Int
  metrics(searchStr: String, searchColumns: [MetricVersionStrColumn], pageNumber: Int, pageSize: Int, orderBy: MetricVersionOrderBy, desc: Boolean): [Metric]
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Metric {
  metadata_: JSONString!
  id: Int
  displayName: String!
  description: String!
  tier: Int!
  metricType: Int!
  metricId: Int
  params: GenericScalar
  createdAt: DateTime!
  hash: String!
  organizationId: Int!
  sourceDataSourceVersions: JSONString!
  orgDataSourceId: Int
  organization: Organization
  orgMetric: OrgMetric
  model: [Model]
  userOwners: [MetricUserOwner]
  teamOwners: [MetricTeamOwner]
  views: MetricView
  questions(searchStr: String, searchColumns: [QuestionStrColumn], pageNumber: Int, pageSize: Int, orderBy: QuestionOrderBy, desc: Boolean): [Question]
  resolvedQuestions: Question
  unresolvedQuestions: Question
  metricLineageDataSources: [MetricLineageDataSource]
  metadata: GenericScalar
  recentQuestions(searchStr: String, searchColumns: [QuestionStrColumn], pageNumber: Int, pageSize: Int, orderBy: QuestionOrderBy, desc: Boolean): [Question]
  recentAnnotations(searchStr: String, searchColumns: [AnnotationStrColumn], pageNumber: Int, pageSize: Int, orderBy: AnnotationOrderBy, desc: Boolean): [Annotation]
  totalQuestions: Int
  totalAnnotations: Int
  name: String
  latestApproval: MetricApproval
  annotations(searchStr: String, searchColumns: [AnnotationStrColumn], pageNumber: Int, pageSize: Int, orderBy: AnnotationOrderBy, desc: Boolean): [Annotation]
  currentDescription: String
  totalRecentViews: Int
  totalRecentViewsForUser: Int
  userIsMetricOwner: Boolean
  userCanEdit: Boolean
  dataSources(searchStr: String, searchColumns: [DataSourceVersionStrColumn], pageNumber: Int, pageSize: Int, orderBy: DataSourceVersionOrderBy, desc: Boolean): [DataSourceVersion]
  totalDataSources: Int
  savedQueries(searchStr: String, searchColumns: [SavedQueryStrColumn], pageNumber: Int, pageSize: Int, orderBy: SavedQueryOrderBy, desc: Boolean): [SavedQuery]
  totalSavedQueries: Int
  totalResolvedQuestions: Int
  totalUnresolvedQuestions: Int
  ownerTeams(searchStr: String, searchColumns: [TeamStrColumn], pageNumber: Int, pageSize: Int, orderBy: TeamOrderBy, desc: Boolean): [Team]
  totalOwnerTeams: Int
  ownerUsers(searchStr: String, searchColumns: [UserStrColumn], pageNumber: Int, pageSize: Int, orderBy: UserOrderBy, desc: Boolean): [User]
  totalOwnerUsers: Int
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type Model {
  id: ID!
  organizationId: Int!
  uploaderId: Int!
  createdAt: DateTime!
  gitRepo: String!
  gitBranch: String!
  gitCommit: String!
  gitIsDirty: Boolean!
  executionContext: String
  isCurrent: Boolean!
  uploader: User
  metrics: [Metric]
  modelDataSources: [ModelDataSource]
  organization: Organization
}

type ModelDataSource {
  orgDataSourceId: ID!
  modelId: ID!
  dataSourceVersionId: ID!
  dataSourceVersion: DataSourceVersion
  model: Model
}

type DataSourceVersion {
  id: ID!
  name: String!
  description: String!
  owners: JSONString
  connection: String!
  sqlTable: String
  sqlQuery: String
  identifiers: JSONString!
  measures: GenericScalar
  dimensions: JSONString!
  dataSourceMetadata: GenericScalar
  mutability: JSONString!
  constraint: JSONString
  createdAt: DateTime!
  hash: String!
  organizationId: Int!
  organization: Organization
  metricLineageDataSources: [MetricLineageDataSource]
}

type MetricLineageDataSource {
  id: ID!
  metricVersionId: Int
  dataSourceVersionId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  organizationId: Int!
  dataSourceVersion: DataSourceVersion
  metric: Metric
  organization: Organization
}

type MetricView {
  organizationId: Int!
  userId: ID!
  metricId: ID!
  createdAt: DateTime!
  metricName: String
  viewedTs: Int
  organization: Organization
}

type Question {
  id: ID!
  organizationId: Int!
  authorId: Int!
  resolved: Boolean
  resolvedBy: Int
  resolvedAt: DateTime
  text: String!
  priority: String!
  notifiedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  metricId: Int
  resolvedTs: Int
  createdTs: Int
  metricName: String!
  organization: Organization
  replies(searchStr: String, searchColumns: [QuestionReplyStrColumn], pageNumber: Int, pageSize: Int, orderBy: QuestionReplyOrderBy, desc: Boolean): [QuestionReply]
  orgMetric: OrgMetric
  author: User
  resolvedByUser: User
  directedToUsers: [User]
  directedToTeams: [Team]
  totalLikes: Int
  likedByCurrentUser: Boolean
  totalReplies: Int
  currentUserIsAuthor: Boolean
  metric: Metric
}

type QuestionReply {
  id: ID!
  organizationId: Int!
  questionId: Int!
  authorId: Int!
  text: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdTs: Int
  organization: Organization
  author: User
  question: Question
  likedByCurrentUser: Boolean
  totalLikes: Int
}

"""An enumeration."""
enum QuestionReplyStrColumn {
  TEXT
}

"""An enumeration."""
enum QuestionReplyOrderBy {
  ID
  ORGANIZATION_ID
  QUESTION_ID
  AUTHOR_ID
  TEXT
  CREATED_AT
  UPDATED_AT
  CREATED_TS
}

"""An enumeration."""
enum QuestionStrColumn {
  TEXT
  PRIORITY
  METRIC_NAME
}

"""An enumeration."""
enum QuestionOrderBy {
  ID
  ORGANIZATION_ID
  AUTHOR_ID
  RESOLVED
  RESOLVED_BY
  RESOLVED_AT
  TEXT
  PRIORITY
  NOTIFIED_AT
  CREATED_AT
  UPDATED_AT
  METRIC_ID
  RESOLVED_TS
  CREATED_TS
  METRIC_NAME
}

type Annotation {
  id: ID!
  organizationId: Int!
  authorId: Int!
  title: String!
  text: String!
  expectedImpact: String!
  priority: String!
  dateStartedAt: String!
  dateEndedAt: String!
  notifiedAt: DateTime
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  dateStart: String
  dateEnd: String
  timestampCreated: Int
  orgMetrics: [OrgMetric]
  author: User
  organization: Organization
  metricAnnotations: [MetricAnnotation]
  metrics: [Metric]
}

type MetricAnnotation {
  id: ID!
  organizationId: Int!
  annotationId: Int!
  metricId: Int
  createdAt: DateTime
  updatedAt: DateTime
  metricName: String
  dimensionName: String
  dimensionValue: String
  organization: Organization
  orgMetric: OrgMetric
  dimensions: [MetricAnnotationDimension]
  annotation: Annotation
  metric: Metric
}

type MetricAnnotationDimension {
  id: ID!
  metricAnnotationId: Int!
  dimensionName: String!
  valueHashes: [String]
}

"""An enumeration."""
enum AnnotationStrColumn {
  TITLE
  TEXT
  EXPECTED_IMPACT
  PRIORITY
  DATE_START
  DATE_END
}

"""An enumeration."""
enum AnnotationOrderBy {
  ID
  ORGANIZATION_ID
  AUTHOR_ID
  TITLE
  TEXT
  EXPECTED_IMPACT
  PRIORITY
  DATE_STARTED_AT
  DATE_ENDED_AT
  NOTIFIED_AT
  DELETED_AT
  CREATED_AT
  UPDATED_AT
  DATE_START
  DATE_END
  TIMESTAMP_CREATED
}

type MetricApproval {
  id: ID!
  organizationId: Int!
  approverId: Int!
  approvedAt: DateTime
  metricId: Int
  approvalTs: Int
  metricName: String
  approver: User
  organization: Organization
}

"""An enumeration."""
enum DataSourceVersionStrColumn {
  NAME
  DESCRIPTION
  CONNECTION
  SQL_TABLE
  SQL_QUERY
  HASH
}

"""An enumeration."""
enum DataSourceVersionOrderBy {
  ID
  NAME
  DESCRIPTION
  OWNERS
  CONNECTION
  SQL_TABLE
  SQL_QUERY
  IDENTIFIERS
  MEASURES
  DIMENSIONS
  DATA_SOURCE_METADATA
  MUTABILITY
  CONSTRAINT
  CREATED_AT
  HASH
  ORGANIZATION_ID
}

"""An enumeration."""
enum SavedQueryStrColumn {
  TITLE
}

"""An enumeration."""
enum SavedQueryOrderBy {
  ID
  ORGANIZATION_ID
  TITLE
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  CREATED_BY
  OWNER_TEAM_ID
  SERIALIZED_QUERY
}

"""An enumeration."""
enum TeamStrColumn {
  NAME
  SLUG
  THEME
  DESCRIPTION
}

"""An enumeration."""
enum TeamOrderBy {
  ID
  ORGANIZATION_ID
  NAME
  CREATED_BY
  SLUG
  THEME
  PRIMARY_DASHBOARD_ID
  FEATURED_METRIC_COLLECTION_ID
  CREATED_AT
  UPDATED_AT
  DEACTIVATED_AT
  DESCRIPTION
  CREATED_TS
  DEACTIVATED_TS
  VIEWS
}

"""An enumeration."""
enum UserStrColumn {
  AUTH0_ID
  USER_NAME
  EMAIL
  AVATAR_URL
}

"""An enumeration."""
enum UserOrderBy {
  ID
  ORGANIZATION_ID
  AUTH0_ID
  USER_NAME
  EMAIL
  CREATED_AT
  UPDATED_AT
  DEACTIVATED_AT
  AVATAR_URL
  PRIMARY_DASHBOARD_ID
  DATE_CREATE
  DATE_DEACTIVATE
}

"""An enumeration."""
enum MetricVersionStrColumn {
  DISPLAY_NAME
  DESCRIPTION
  HASH
}

"""An enumeration."""
enum MetricVersionOrderBy {
  ID
  DISPLAY_NAME
  DESCRIPTION
  TIER
  METRIC_TYPE
  METRIC_ID
  PARAMS
  METADATA
  CREATED_AT
  HASH
  ORGANIZATION_ID
  SOURCE_DATA_SOURCE_VERSIONS
  ORG_DATA_SOURCE_ID
  VIEWS
}

"""An enumeration."""
enum MetricCollectionMetricOrderBy {
  ID
  CREATED_AT
  UPDATED_AT
  METRIC_COLLECTION_ID
  METRIC_ID
  POSITION
  EMPHASIS
}

type MetricCollectionView {
  id: ID!
  metricCollectionId: Int!
  userId: Int!
  organizationId: Int!
  createdAt: DateTime!
  metricCollection: MetricCollection
  organization: Organization
  user: User
}

type TeamView {
  id: ID!
  teamId: Int!
  userId: Int!
  organizationId: Int!
  createdAt: DateTime!
  organization: Organization
  team: Team
  user: User
}

"""An enumeration."""
enum MetricCollectionStrColumn {
  TITLE
  SLUG
  DESCRIPTION
}

"""An enumeration."""
enum MetricCollectionOrderBy {
  ID
  TITLE
  ORGANIZATION_ID
  PRIMARY_DASHBOARD_ID
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  SLUG
  CREATED_BY
  OWNER_TEAM_ID
  DESCRIPTION
  DEFAULT_EMPHASIS
  VIEWS
}

type ApiKey {
  prefix: String!
  organizationId: Int!
  userId: Int!
  type: String!
  secretHash: String!
  dateRevoked: Int
  createdAt: DateTime
  revokedAt: DateTime
  revokerId: Int
  lastUsedAt: DateTime
  scope: String
  user: User
  organization: Organization
  revoker: User
}

"""An enumeration."""
enum ApiKeyStrColumn {
  PREFIX
  TYPE
  SECRET_HASH
  SCOPE
}

"""An enumeration."""
enum ApiKeyOrderBy {
  PREFIX
  ORGANIZATION_ID
  USER_ID
  TYPE
  SECRET_HASH
  DATE_REVOKED
  CREATED_AT
  REVOKED_AT
  REVOKER_ID
  LAST_USED_AT
  SCOPE
}

type Feature {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  retiredAt: DateTime
  organizations(searchStr: String, searchColumns: [OrganizationStrColumn], pageNumber: Int, pageSize: Int, orderBy: OrganizationOrderBy, desc: Boolean): [Organization]
  users(searchStr: String, searchColumns: [UserStrColumn], pageNumber: Int, pageSize: Int, orderBy: UserOrderBy, desc: Boolean): [User]
  totalOrganizations: Int
  totalUsers: Int
}

"""An enumeration."""
enum OrganizationStrColumn {
  NAME
  DOMAIN
  LOGO_URL
  PRIMARY_CONFIG_REPO
  PRIMARY_CONFIG_BRANCH
  MQL_SERVER_URL
  SOURCE_CONTROL_URL
  MQL_SERVER_LOGS
  SLUG
}

"""An enumeration."""
enum OrganizationOrderBy {
  ID
  NAME
  DOMAIN
  CREATED_AT
  DEACTIVATED_AT
  SHARD_ID
  LOGO_URL
  PRIMARY_CONFIG_REPO
  PRIMARY_CONFIG_BRANCH
  MQL_SERVER_URL
  SOURCE_CONTROL_URL
  MQL_SERVER_LOGS
  UPDATED_AT
  SLUG
  IS_HOSTED
}

type OrgMqlServer {
  id: ID!
  organizationId: Int!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  url: String!
  isOrgDefault: Boolean
  configSecret: String
  dwEngine: String
  heartbeats: [MqlHeartbeat]
  organization: Organization
  latestHeartbeat: MqlHeartbeat
}

type MqlHeartbeat {
  id: ID!
  organizationId: Int!
  userId: Int!
  createdAt: DateTime
  versionSha: String!
  status: String!
  details: JSONString
  mqlServerId: Int
  mqlServer: OrgMqlServer
  user: User
  org: Organization
  orgMqlServers: OrgMqlServer
}

"""An enumeration."""
enum OrgMqlServerStrColumn {
  NAME
  URL
  CONFIG_SECRET
  DW_ENGINE
}

"""An enumeration."""
enum OrgMqlServerOrderBy {
  ID
  ORGANIZATION_ID
  CREATED_AT
  UPDATED_AT
  NAME
  URL
  IS_ORG_DEFAULT
  CONFIG_SECRET
  DW_ENGINE
}

"""An enumeration."""
enum MetricTier {
  ONE
  TWO
  THREE
}

"""An enumeration."""
enum MetricType {
  MEASURE_PROXY
  RATIO
  EXPR
}

"""An enumeration."""
enum FeatureStrColumn {
  NAME
}

"""An enumeration."""
enum FeatureOrderBy {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  RETIRED_AT
}

"""
Base mutation object exposed by GraphQL.

Mutation names will be converted from snake_case to camelCase automatically
(e.g., log_mql_log will show up as logMqlLog in the GQL schema).
"""
type Mutation {
  revokeApiKeyTest(prefix: String!): ApiKey
  createOrganizationTest(name: String!, primaryConfigRepo: String, primaryConfigBranch: String, mqlServerUrl: String, sourceControlUrl: String, mqlServerLogs: String, isHosted: Boolean, dwEngine: String, mqlServerName: String): Organization
  logMqlLog(level: String, message: String, tags: [String!]): LogMQLLogs
  setOrgMqlServerConfigSecret(clientConfigSecretId: String, mqlServerId: Int): SetOrgMqlServerConfigSecretId
  sendMqlHeartbeat(mqlServerId: Int, sha: String!): SendMqlHeartbeat
  createAnnotationTest(dateEndedAt: Date!, dateStartedAt: Date!, expectedImpact: String!, metricInputs: [GMetricAnnotationInput]!, priority: Priority!, text: String!, title: String!): CreateAnnotation
  updateAnnotationTest(annotationId: Int!, dateEndedAt: Date, dateStartedAt: Date, expectedImpact: String, metricInputs: [GMetricAnnotationInput], priority: Priority, text: String, title: String): UpdateAnnotation
  removeAnnotation(annotationId: Int!): RemoveAnnotation

  """
  Update user's email in DB and auth0. Auth0 needs to match for user to login with new email.
  """
  updateUserEmail(email: String!, userId: Int): UpdateUserEmail

  """
  Create API Key for given user. If no user_id passed, create key for authenticated user.
  """
  createApiKeyTest(userId: Int): CreateApiKey

  """
  Create User for given org. If no org_id passed, create user in org of authenticated user.
  """
  createUserTest(email: String!, isOrgOwner: Boolean, organizationId: Int, userName: String!): CreateUser

  """Add role to user in DB and Auth0."""
  addRoleToUserTest(role: String!, userId: Int!): AddRoleToUser

  """Remove role from user in DB and Auth0."""
  removeRoleFromUserTest(role: String!, userId: Int!): RemoveRoleFromUser

  """Deactivate user in DB and Auth0."""
  deactivateUserTest(userId: Int!): DeactivateUser

  """Reactivate user in DB and Auth0."""
  reactivateUserTest(userId: Int!): ReactivateUser

  """Update fields on a User."""
  updateUserTest(avatarUrl: String, email: String, id: ID!, primaryDashboardId: ID, userName: String): UpdateUser
  setUserPreference(prefKey: String!, prefValue: String!, userId: ID): SetUserPreference
  featuresCreate(name: String!): Feature
  featuresUpdate(id: ID!, name: String, retireFeature: Boolean): Feature
  featuresAddOrgs(featureId: ID!, organizationIds: [ID]!): Feature
  featuresAddUsers(featureId: ID!, userIds: [ID]!): Feature
  featuresRemoveAccess(featureId: ID!, userIds: [ID], organizationIds: [ID]): Feature
  questionsCreateReply(questionId: ID!, text: String!): Question
  questionRepliesLike(id: ID!): QuestionReply
  questionsLike(id: ID!): Question
  questionRepliesUnlike(id: ID!): QuestionReply
  questionsUnlike(id: ID!): Question
  questionsCreate(text: String!, priority: String!, metricId: ID!, directedToUsers: [ID], directedToTeams: [ID]): Question
  questionsEdit(id: ID!, text: String, priority: String, directedToTeams: [ID], directedToUsers: [ID], resolved: Boolean): Question
  metricCollectionCreate(title: String!, description: String!, slug: String!, defaultEmphasis: Int!, metrics: [ID], ownerTeamId: ID): MetricCollection
  metricCollectionUpdate(id: ID!, title: String, primaryDashboardId: ID, description: String, slug: String, defaultEmphasis: Int, items: [MetricCollectionItem], ownerTeamId: ID): MetricCollection
  metricCollectionDelete(id: ID!): MetricCollection
  orgMqlServerUpdate(id: ID!, name: String, url: String, isOrgDefault: Boolean, configSecret: String, dwEngine: String): OrgMqlServer
  orgMqlServerDelete(id: ID!): OrgMqlServer
  orgMqlServerCreate(organizationId: ID, name: String!, url: String!, isOrgDefault: Boolean, configSecret: String, dwEngine: String): OrgMqlServer
  teamsCreate(name: String!, slug: String!, organizationId: ID, description: String, theme: String, regularMemberUserIds: [ID], teamAdminUserIds: [ID]): Team
  teamsUpdate(id: ID!, name: String, slug: String, description: String, theme: String, primaryDashboardId: Int, featuredMetricCollectionId: Int, deactivate: Boolean): Team
  teamsAddMember(teamId: ID!, regularMemberUserIds: [ID], teamAdminUserIds: [ID]): Team
  teamsRemoveMember(teamId: ID!, userId: ID!): Team
  teamSetMemberAdminStatus(teamMemberId: ID!, isTeamAdmin: Boolean!): Team
  teamsAssignAsMetricOwner(teamId: ID!, metricIds: [ID]): Team
  teamsRemoveAsMetricOwner(teamId: ID!, metricIds: [ID]): Team
  organizationsUpdate(id: ID!, name: String, logoUrl: String, primaryConfigRepo: String, primaryConfigBranch: String, sourceControlUrl: String, mqlServerLogs: String, isHosted: Boolean): Organization
  organizationsDelete(id: ID!): Organization
  metricsApprove(metricId: ID!): Metric
  metricsLogView(metricId: ID!): MetricView
  metricCollectionsLogView(metricCollectionId: ID!): MetricCollectionView
  teamsLogView(teamId: ID!): TeamView
  metricsAddUserOwners(metricId: ID!, userIds: [ID]): Metric
  metricsRemoveUserOwners(metricId: ID!, userIds: [ID]): Metric
  metricsAssignTeamOwners(metricId: ID!, teamIds: [ID]): Metric
  metricsRemoveTeamOwners(metricId: ID!, teamIds: [ID]): Metric
  metricsAddDescription(metricId: ID!, description: String!): Metric
  savedQueryCreate(title: String!, serializedQuery: GenericScalar!, metricIds: [ID], ownerTeamId: ID): SavedQuery
  savedQueryUpdate(id: ID!, title: String, createdBy: Int, ownerTeamId: Int, serializedQuery: GenericScalar, metricIds: [ID]): SavedQuery
  savedQueryDeactivate(id: ID!): SavedQuery
}

type LogMQLLogs {
  ok: Boolean
}

type SetOrgMqlServerConfigSecretId {
  mqlServer: OrgMqlServer
}

type SendMqlHeartbeat {
  success: Boolean
  heartbeat: MqlHeartbeat
}

type CreateAnnotation {
  annotation: Annotation
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

input GMetricAnnotationInput {
  metricId: Int!
  dimensions: [GMetricAnnotationDimensionInput]!
}

input GMetricAnnotationDimensionInput {
  dimensionName: String!
  valueHashes: [String]!
}

"""An enumeration."""
enum Priority {
  NO_PRIORITY
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

type UpdateAnnotation {
  annotation: Annotation
}

type RemoveAnnotation {
  ok: Boolean
}

"""
Update user's email in DB and auth0. Auth0 needs to match for user to login with new email.
"""
type UpdateUserEmail {
  user: User
}

"""
Create API Key for given user. If no user_id passed, create key for authenticated user.
"""
type CreateApiKey {
  createdKeyFullString: String
  createdKeyPrefix: String
}

"""
Create User for given org. If no org_id passed, create user in org of authenticated user.
"""
type CreateUser {
  user: User
}

"""Add role to user in DB and Auth0."""
type AddRoleToUser {
  user: User
}

"""Remove role from user in DB and Auth0."""
type RemoveRoleFromUser {
  user: User
}

"""Deactivate user in DB and Auth0."""
type DeactivateUser {
  user: User
}

"""Reactivate user in DB and Auth0."""
type ReactivateUser {
  user: User
}

"""Update fields on a User."""
type UpdateUser {
  user: User
}

type SetUserPreference {
  user: User
}

"""
Graphene input object for a metric collection item. Essentially a dataclass.
"""
input MetricCollectionItem {
  metricId: ID!
  emphasis: Int!
  position: Int!
}
