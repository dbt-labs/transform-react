"""
Base Query object exposed by GraphQL.

Each field defined below is accessible by the API, by calling the equivalent resolver.
"""
type Query {
  auth0Profile(auth0Id: String!): Auth0Profile
  mqlServerUrl: String
  latestMqlServer: ServiceRelease
  latestAvaticaServer: ServiceRelease
  latestExcelDesktop: ServiceRelease
  myOrganization: Organization
  myUser: User
  allFeatures(searchStr: String, searchColumns: [FeatureStrColumns], orderBy: FeatureOrderBy, desc: Boolean, orderBys: [FeatureOrderByInput], pageNumber: Int, pageSize: Int): [Feature]
  allOrganizations(searchStr: String, searchColumns: [OrganizationStrColumns], orderBy: OrganizationOrderBy, desc: Boolean, orderBys: [OrganizationOrderByInput], pageNumber: Int, pageSize: Int): [Organization]
  totalFeatures: Int
  totalOrganizations: Int
  organizationTest(id: ID!): Organization
  featureTest(id: ID!): Feature
  boom(raise_: Boolean): Boolean
  transformConfig: TransformConfig
  emailCanSignUp(email: String!): Boolean
  dwHealthCheck(snowflakeConnectionDetails: SnowflakeConnectionInput, redshiftConnectionDetails: RedshiftConnectionInput, bigQueryConnectionDetails: BigQueryConnectionInput, databricksConnectionDetails: DatabricksConnectionInput): [MqlServerHealthItem]
  flagIsEnabled(flag: String!): Boolean
  supportedAlertRules: [AlertRuleDefinition]
  celeryHealthCheck: Int
}

"""A wrapper for the response we get from Auth0's user profile API"""
type Auth0Profile {
  picture: String
  lastIp: String
  lastLogin: DateTime
  loginsCount: Int
  blocked: Boolean
  emailVerified: Boolean
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
This is the externally-facing Graphene object representing the available MQL server download.

TODO: There's likely a simple way to merge these two objects together
"""
type ServiceRelease {
  serviceName: String
  version: String
  downloadUrl: String
  versionHash: String
}

type Organization {
  id: ID!
  name: String!
  logoUrl: String
  primaryConfigRepo: String
  primaryConfigBranch: String
  sourceControlUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  deactivatedAt: DateTime
  mqlServerLogs: String
  isHosted: Boolean!
  type: OrgType
  users(activeOnly: Boolean, searchStr: String, searchColumns: [UserStrColumns], orderBy: UserOrderBy, desc: Boolean, orderBys: [UserOrderByInput], pageNumber: Int, pageSize: Int): [User]
  mqlServers(searchStr: String, searchColumns: [OrgMqlServerStrColumns], orderBy: OrgMqlServerOrderBy, desc: Boolean, orderBys: [OrgMqlServerOrderByInput], pageNumber: Int, pageSize: Int): [OrgMqlServer]
  models(id: ID): [Model]
  orgMetrics(names: [String], tiers: [MetricTier], tags: [Int], types: [MetricType], modelId: Int, userIsSubscribed: Boolean, ownedByTeamIds: [Int], ownedByUserIds: [Int], createdAtOrBefore: DateTime, createdAtOrAfter: DateTime, searchStr: String, searchColumns: [OrgMetricStrColumns], orderBy: OrgMetricOrderBy, desc: Boolean, orderBys: [OrgMetricOrderByInput], pageNumber: Int, pageSize: Int): [OrgMetric]
  orgTags: [OrgTag]
  mqlHeartbeats: [MqlHeartbeat]
  teams(searchStr: String, searchColumns: [TeamStrColumns], orderBy: TeamOrderBy, desc: Boolean, orderBys: [TeamOrderByInput], pageNumber: Int, pageSize: Int): [Team]
  prefs(prefKey: String, searchStr: String, searchColumns: [OrgPrefStrColumns], orderBy: OrgPrefOrderBy, desc: Boolean, orderBys: [OrgPrefOrderByInput], pageNumber: Int, pageSize: Int): [OrgPref]
  savedQueries(onlyPublicAndMine: Boolean, metrics: [String], searchStr: String, searchColumns: [SavedQueryStrColumns], orderBy: SavedQueryOrderBy, desc: Boolean, orderBys: [SavedQueryOrderByInput], pageNumber: Int, pageSize: Int): [SavedQuery]
  metricViews: [MetricView]
  teamViews: [TeamView]
  integrations: Integrations
  modelsV2(searchStr: String, searchColumns: [ModelStrColumns], orderBy: ModelOrderBy, desc: Boolean, orderBys: [ModelOrderByInput], pageNumber: Int, pageSize: Int): [Model]
  questions(searchStr: String, searchColumns: [QuestionStrColumns], orderBy: QuestionOrderBy, desc: Boolean, orderBys: [QuestionOrderByInput], pageNumber: Int, pageSize: Int): [Question]
  question(id: ID!): Question
  annotations(searchStr: String, searchColumns: [AnnotationStrColumns], orderBy: AnnotationOrderBy, desc: Boolean, orderBys: [AnnotationOrderByInput], pageNumber: Int, pageSize: Int): [Annotation]
  annotation(id: ID!): Annotation
  recentQuestions(searchStr: String, searchColumns: [QuestionStrColumns], orderBy: QuestionOrderBy, desc: Boolean, orderBys: [QuestionOrderByInput], pageNumber: Int, pageSize: Int): [Question]
  recentAnnotations(searchStr: String, searchColumns: [AnnotationStrColumns], orderBy: AnnotationOrderBy, desc: Boolean, orderBys: [AnnotationOrderByInput], pageNumber: Int, pageSize: Int): [Annotation]
  totalQuestions: Int
  totalAnnotations: Int
  metrics(names: [String], tiers: [MetricTier], tags: [Int], types: [MetricType], modelId: Int, userIsSubscribed: Boolean, ownedByTeamIds: [Int], ownedByUserIds: [Int], createdAtOrBefore: DateTime, createdAtOrAfter: DateTime, searchStr: String, searchColumns: [OrgMetricStrColumns], orderBy: OrgMetricOrderBy, desc: Boolean, orderBys: [OrgMetricOrderByInput], pageNumber: Int, pageSize: Int): [OrgMetric]
  totalOrgMetrics(searchStr: String, searchColumns: [OrgMetricStrColumns], names: [String], tiers: [MetricTier], tags: [Int], types: [MetricType], modelId: Int, userIsSubscribed: Boolean, ownedByTeamIds: [Int], ownedByUserIds: [Int], createdAtOrBefore: DateTime, createdAtOrAfter: DateTime): Int
  totalMetrics(searchStr: String, searchColumns: [OrgMetricStrColumns], names: [String], tiers: [MetricTier], tags: [Int], types: [MetricType], modelId: Int, userIsSubscribed: Boolean, ownedByTeamIds: [Int], ownedByUserIds: [Int], createdAtOrBefore: DateTime, createdAtOrAfter: DateTime): Int
  supportedMetricFilters: [MetricFilter]
  latestMqlHeartbeat: MqlHeartbeat
  totalUsers(activeOnly: Boolean, searchStr: String, searchColumns: [UserStrColumns]): Int
  usersById(ids: [Int]!): [User]
  totalTeams: Int
  mqlServer(id: ID!): OrgMqlServer
  totalMqlServers: Int
  orgMetric(name: String!): OrgMetric
  metric(name: String!, modelId: Int): OrgMetric
  team(slug: String!): Team
  savedQuery(id: ID!): SavedQuery
  totalMetricCollections: Int
  totalSavedQueries(searchStr: String, searchColumns: [SavedQueryStrColumns], onlyPublicAndMine: Boolean, metrics: [String]): Int
  totalActiveFeatures: Int
  requireMfa: Boolean
  allowMfaRememberBrowser: Boolean
  mqlServerUrl: String
  allowedEmailDomains: [String]
  sourceControl: SourceControl
  tierTooltips(tiers: [Int]!): GenericScalar
  activeOrgAdmins(searchStr: String, searchColumns: [UserStrColumns], orderBy: UserOrderBy, desc: Boolean, orderBys: [UserOrderByInput], pageNumber: Int, pageSize: Int): [User]
  mqlServerConfig(id: ID!): DataWarehouseConfig
  incompleteOnboardingTasks: [String]
  samlConnectionName: String
  preferredLogin: String
  sharedSlackChannelName: String
  primaryMqlServer: OrgMqlServer
  annotationsFeed(userIsSubscribed: Boolean, pageNumber: Int, pageSize: Int): [Annotation]
  samlConnectionId: String
  samlSignatureCert: String
  integrationConfigurationTableau: IntegrationConfigurationTableau
  integrationConfigurationDbtCloud: IntegrationConfigurationDbtCloud
  dbUtcTimezoneOffsetHours: Int
  dbArrearsHours: Int
  allIntegrations(searchStr: String, searchColumns: [IntegrationStrColumns], orderBy: IntegrationOrderBy, desc: Boolean, orderBys: [IntegrationOrderByInput], pageNumber: Int, pageSize: Int): [Integration]
  pendingInvites(searchStr: String, searchColumns: [InviteStrColumns], orderBy: InviteOrderBy, desc: Boolean, orderBys: [InviteOrderByInput], pageNumber: Int, pageSize: Int): [Invite]
  integration(integrationType: GIntegrationType!): Integration
  modelFromModelKey(repo: String!, branch: String!, commit: String!): Model
  boardsV2(searchStr: String, searchColumns: [BoardStrColumns], orderBy: BoardOrderBy, desc: Boolean, orderBys: [BoardOrderByInput], pageNumber: Int, pageSize: Int): [Board]
  totalBoardsV2(searchStr: String, searchColumns: [BoardStrColumns], excludeNotViewed: Boolean): Int
  board(id: Int!): Board
  queryIdsInSavedQueries: [Int]
  metricNamesInBoards: [String]
  currentModel: [Model]
  historyOfCurrentModels(pageNumber: Int, pageSize: Int): [CurrentModelHistory]
  annotationsForMetrics(metrics: [String]!, dimensions: [GMetricAnnotationDimensionInput], startDate: Date, endDate: Date, priorities: [Priority], searchStr: String, searchColumns: [AnnotationStrColumns], orderBy: AnnotationOrderBy, desc: Boolean, orderBys: [AnnotationOrderByInput], pageNumber: Int, pageSize: Int): [Annotation]
  totalAnnotationsForMetrics(metrics: [String]!, dimensions: [GMetricAnnotationDimensionInput], startDate: Date, endDate: Date, priorities: [Priority]): Int
  user(id: Int!): User
  activeFeatures: [Feature]
}

"""An enumeration."""
enum OrgType {
  PAID
  TRIAL
  INTERNAL
  TEST
}

type User {
  id: ID!
  organizationId: Int!
  auth0Id: String!
  userName: String!
  email: String!
  createdAt: DateTime
  updatedAt: DateTime
  deactivatedAt: DateTime
  avatarUrl: String
  primaryDashboardId: Int
  roles: [UserRole]
  prefs: [UserPref]
  activeUserRoles: [UserRole]
  teams(isAdminOnly: Boolean, searchStr: String, searchColumns: [TeamStrColumns], orderBy: TeamOrderBy, desc: Boolean, orderBys: [TeamOrderByInput], pageNumber: Int, pageSize: Int): [Team]
  teamMemberships: [TeamMember]
  savedQueries(searchStr: String, searchColumns: [SavedQueryStrColumns], orderBy: SavedQueryOrderBy, desc: Boolean, orderBys: [SavedQueryOrderByInput], pageNumber: Int, pageSize: Int): [SavedQuery]
  apiKeys(activeOnly: Boolean, searchStr: String, searchColumns: [ApiKeyStrColumns], orderBy: ApiKeyOrderBy, desc: Boolean, orderBys: [ApiKeyOrderByInput], pageNumber: Int, pageSize: Int): [ApiKey]
  organization: Organization
  metricMetadataItems: [MetricMetadata]
  teamViews: [TeamView]
  mqlServerUrl: String
  activeRoles: [String]
  isAdmin: Boolean
  isOrgAdmin: Boolean
  auth0Profile: Auth0Profile
  totalTeams: Int
  totalApiKeys: Int
  totalSavedQueries: Int
  totalViewedMetrics: Int
  totalActiveFeatures: Int
  hasAcceptedLatestTermsOfService: Boolean
  acceptedTermsOfService: Int
  totalFeaturedMetrics: Int
  totalSubscribedMetrics: Int
  latestInAppNotifications(latestNotifShownCreatedAt: DateTime, notifIdsAlreadyShown: [ID], pageNumber: Int, pageSize: Int): [Notification]
  totalUndeliveredInAppNotifications: Int
  totalInAppNotifications: Int
  generalAlertNotificationRules: [AlertNotificationRule]
  dismissedOnboardingCards: Boolean
  isSubscribedToChannels: GenericScalar
  boardsV2(searchStr: String, searchColumns: [BoardStrColumns], orderBy: BoardOrderBy, desc: Boolean, orderBys: [BoardOrderByInput], pageNumber: Int, pageSize: Int): [Board]
  favoriteBoards(searchStr: String, searchColumns: [BoardStrColumns], orderBy: BoardOrderBy, desc: Boolean, orderBys: [BoardOrderByInput], pageNumber: Int, pageSize: Int): [Board]
  totalFavoriteBoards(searchStr: String, searchColumns: [BoardStrColumns], excludeNotViewed: Boolean): Int
  favoriteFilteredViews(searchStr: String, searchColumns: [BoardFilteredViewStrColumns], orderBy: BoardFilteredViewOrderBy, desc: Boolean, orderBys: [BoardFilteredViewOrderByInput], pageNumber: Int, pageSize: Int): [BoardFilteredView]
  totalFavoriteFilteredViews(searchStr: String, searchColumns: [BoardFilteredViewStrColumns], excludeNotViewed: Boolean): Int
  totalBoardsV2(searchStr: String, searchColumns: [BoardStrColumns], excludeNotViewed: Boolean): Int
  boardsWithSubscribedMetricsV2(searchStr: String, searchColumns: [BoardStrColumns], orderBy: BoardOrderBy, desc: Boolean, orderBys: [BoardOrderByInput], pageNumber: Int, pageSize: Int): [Board]
  totalBoardsWithSubscribedMetricsV2(searchStr: String, searchColumns: [BoardStrColumns], excludeNotViewed: Boolean): Int
  viewedOrgMetrics(searchStr: String, searchColumns: [OrgMetricStrColumns], orderBy: OrgMetricOrderBy, desc: Boolean, orderBys: [OrgMetricOrderByInput], pageNumber: Int, pageSize: Int): [OrgMetric]
  newOrgMetrics(searchStr: String, searchColumns: [OrgMetricStrColumns], orderBy: OrgMetricOrderBy, desc: Boolean, orderBys: [OrgMetricOrderByInput], pageNumber: Int, pageSize: Int): [OrgMetric]
  activeFeatures: [Feature]
  featuredOrgMetrics(pageNumber: Int, pageSize: Int): [OrgMetric]
  subscribedOrgMetrics(pageNumber: Int, pageSize: Int): [OrgMetric]
}

type UserRole {
  id: ID!
  organizationId: Int!
  userId: Int!
  role: String
  createdAt: DateTime
  updatedAt: DateTime
  removedAt: DateTime
  organization: Organization
  user: User
}

type UserPref {
  id: ID!
  organizationId: Int!
  userId: Int!
  prefKey: String!
  prefValue: String!
  createdAt: DateTime
  updatedAt: DateTime
  organization: Organization
  user: User
}

type Team {
  id: ID!
  organizationId: Int!
  name: String!
  createdBy: Int
  slug: String!
  theme: String
  primaryDashboardId: Int
  featuredMetricCollectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deactivatedAt: DateTime
  description: String
  createdByUser: User
  organization: Organization
  members(orderBy: TeamMemberOrderBy, desc: Boolean, orderBys: [TeamMemberOrderByInput], pageNumber: Int, pageSize: Int): [TeamMember]
  adminMembers: [TeamMember]
  memberUsers: [User]
  savedQueries(searchStr: String, searchColumns: [SavedQueryStrColumns], orderBy: SavedQueryOrderBy, desc: Boolean, orderBys: [SavedQueryOrderByInput], pageNumber: Int, pageSize: Int): [SavedQuery]
  views: [TeamView]
  teamAdminIds: [Int]
  userIsTeamAdmin: Boolean
  totalMetrics: Int
  totalSavedQueries: Int
  totalMetricCollections: Int
  totalMembers: Int
  totalRecentViews: Int
  totalRecentViewsForUser: Int
  orgMetrics(searchStr: String, searchColumns: [OrgMetricStrColumns], orderBy: OrgMetricOrderBy, desc: Boolean, orderBys: [OrgMetricOrderByInput], pageNumber: Int, pageSize: Int): [OrgMetric]
  boards(searchStr: String, searchColumns: [BoardStrColumns], orderBy: BoardOrderBy, desc: Boolean, orderBys: [BoardOrderByInput], pageNumber: Int, pageSize: Int): [Board]
}

type TeamMember {
  id: ID!
  teamId: Int!
  organizationId: Int!
  userId: Int!
  isTeamAdmin: Boolean!
  joinedAt: DateTime
  organization: Organization
  team: Team
  user: User
}

"""An enumeration."""
enum TeamMemberOrderBy {
  EMAIL
  ID
  IS_TEAM_ADMIN
  JOINED_AT
  ORGANIZATION_ID
  TEAM_ID
  USER_ID
  User__AUTH0_ID
  User__AVATAR_URL
  User__CREATED_AT
  User__DEACTIVATED_AT
  User__EMAIL
  User__ORGANIZATION_ID
  User__PRIMARY_DASHBOARD_ID
  User__UPDATED_AT
  User__USER_NAME
}

input TeamMemberOrderByInput {
  orderBy: TeamMemberOrderBy!
  desc: Boolean
}

type SavedQuery {
  id: ID!
  organizationId: Int!
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: Int!
  ownerTeamId: Int
  serializedQuery: GenericScalar
  queryId: Int
  isPrivate: Boolean!
  chartType: ChartType
  createdByUser: User
  organization: Organization
  ownerTeam: Team
  orgMetrics(searchStr: String, searchColumns: [OrgMetricStrColumns], orderBy: OrgMetricOrderBy, desc: Boolean, orderBys: [OrgMetricOrderByInput], pageNumber: Int, pageSize: Int): [OrgMetric]
  dbQuery: MQLQuery
  totalMetrics: Int
  userCanEditContent: Boolean
  userCanDeactivate: Boolean
  userCanChangeOwner: Boolean
  userIsOwner: Boolean
  orgMetricsNotCurrent: [OrgMetric]
  otherUsersBoardsUsingSavedQuery: [Board]
  boardsUsingSavedQuery: [Board]
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""An enumeration."""
enum ChartType {
  LINE_CHART
  AREA_CHART_STACKED
  AREA_CHART_SHARE_OF
  BAR_CHART
  BAR_CHART_STACKED
  BAR_CHART_SHARE_OF
  BIG_NUMBER
  TABLE
  DUAL_AXIS_LINE_CHART
}

type OrgMetric {
  id: Int
  createdAt: DateTime!
  name: String!
  userOwners: [MetricUserOwner]
  userOwnersWithDeactivated: [MetricUserOwner]
  userViewers: [MetricUserViewer]
  teamOwners: [MetricTeamOwner]
  teamViewers: [MetricTeamViewer]
  organization: Organization
  userSubscribers: [MetricUserSubscription]
  allOwnerUserIds: [Int]
  displayName: String
  isCurrent: Boolean
  isPrivate: Boolean
  model: Model
  ownerAccessUsers(searchStr: String, searchColumns: [UserStrColumns], orderBy: UserOrderBy, desc: Boolean, orderBys: [UserOrderByInput], pageNumber: Int, pageSize: Int): [User]
  viewerAccessUsers(searchStr: String, searchColumns: [UserStrColumns], orderBy: UserOrderBy, desc: Boolean, orderBys: [UserOrderByInput], pageNumber: Int, pageSize: Int): [User]
  pendingOwnerRequestsUsers(searchStr: String, searchColumns: [UserStrColumns], orderBy: UserOrderBy, desc: Boolean, orderBys: [UserOrderByInput], pageNumber: Int, pageSize: Int): [User]
  pendingViewerRequestsUsers(searchStr: String, searchColumns: [UserStrColumns], orderBy: UserOrderBy, desc: Boolean, orderBys: [UserOrderByInput], pageNumber: Int, pageSize: Int): [User]
  ownerAccessTeams(searchStr: String, searchColumns: [TeamStrColumns], orderBy: TeamOrderBy, desc: Boolean, orderBys: [TeamOrderByInput], pageNumber: Int, pageSize: Int): [Team]
  viewerAccessTeams(searchStr: String, searchColumns: [TeamStrColumns], orderBy: TeamOrderBy, desc: Boolean, orderBys: [TeamOrderByInput], pageNumber: Int, pageSize: Int): [Team]
  pendingOwnerRequestsTeams(searchStr: String, searchColumns: [TeamStrColumns], orderBy: TeamOrderBy, desc: Boolean, orderBys: [TeamOrderByInput], pageNumber: Int, pageSize: Int): [Team]
  pendingViewerRequestsTeams(searchStr: String, searchColumns: [TeamStrColumns], orderBy: TeamOrderBy, desc: Boolean, orderBys: [TeamOrderByInput], pageNumber: Int, pageSize: Int): [Team]
  protectedFields: ProtectedMetricFields
  tier: Int
  userHasAccess(userId: Int): Boolean

  """status of request for metric ownership"""
  userGovernanceRequestStatus: GovernanceRequestStatus
  description: String
  valueFormat: String
  isAdditive: Boolean
}

type MetricUserOwner {
  id: ID!
  organizationId: Int!
  orgMetricId: Int!
  userId: Int!
  createdAt: DateTime
  createdBy: Int!
  isLocked: Boolean!
  ownerType: OwnerType!
  governanceType: GovernanceType!
  user: User
  organization: Organization
}

"""An enumeration."""
enum OwnerType {
  BUSINESS
  TECHNICAL
}

"""
Enum of governance types for both teams and users that are associated with private metrics
"""
enum GovernanceType {
  OWNER
  VIEWER
}

type MetricUserViewer {
  id: ID!
  organizationId: Int!
  orgMetricId: Int!
  userId: Int!
  createdAt: DateTime
  createdBy: Int!
  isLocked: Boolean!
  ownerType: OwnerType!
  governanceType: GovernanceType!
  user: User
  organization: Organization
}

type MetricTeamOwner {
  id: ID!
  organizationId: Int!
  teamId: Int!
  orgMetricId: Int!
  createdAt: DateTime
  createdBy: Int!
  ownerType: OwnerType!
  governanceType: GovernanceType!
  team: Team
  organization: Organization
}

type MetricTeamViewer {
  id: ID!
  organizationId: Int!
  teamId: Int!
  orgMetricId: Int!
  createdAt: DateTime
  createdBy: Int!
  ownerType: OwnerType!
  governanceType: GovernanceType!
  team: Team
  organization: Organization
}

type MetricUserSubscription {
  id: ID!
  metricId: Int!
  userId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  user: User
}

type Model {
  id: ID!
  organizationId: Int!
  uploaderId: Int!
  createdAt: DateTime!
  gitRepo: String!
  gitBranch: String!
  gitCommit: String!
  gitIsDirty: Boolean!
  executionContext: String
  isCurrent: Boolean!
  isValidation: Boolean!
  isDbtModel: Boolean!
  modelDbtDataSources: [ModelDataSource]
  uploader: User
  orgMetrics: [OrgMetric]
  modelDataSources: [ModelDataSource]
  organization: Organization
}

type ModelDataSource {
  orgDataSourceId: ID!
  modelId: ID!
  dataSourceVersionId: ID!
  dataSourceVersion: DataSourceVersion
  model: Model
  joinableDataSources(identifiers: [String] = [], primaryOnly: Boolean = false): [ModelDataSource]
}

type DataSourceVersion {
  id: ID!
  name: String!
  description: String!
  owners: JSONString
  connection: String!
  sqlTable: String
  sqlQuery: String
  dbtModel: String
  identifiers: JSONString!
  measures: GenericScalar
  dimensions: JSONString!
  dataSourceMetadata: GenericScalar
  mutability: JSONString!
  constraint: JSONString
  createdAt: DateTime!
  hash: String!
  organizationId: Int!
  organization: Organization
  modelDataSource: [ModelDataSource]
  dbtModelMeta: DbtModelMeta
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type DbtModelMeta {
  model: String!
  schema: String!
  database: String
  modelUpdatedAt: DateTime!
  formerModelUpdatedAt: DateTime
  wasFullRefresh: Boolean!
  gitSha: String
  projectId: String
  projectName: String
  jobId: String
  runId: String
  lastSyncedAt: DateTime!
  organizationId: ID!
  docsUrl: String
  organization: Organization
}

"""An enumeration."""
enum UserStrColumns {
  AUTH0_ID
  AVATAR_URL
  EMAIL
  USER_NAME
}

"""An enumeration."""
enum UserOrderBy {
  AUTH0_ID
  AVATAR_URL
  CREATED_AT
  DEACTIVATED_AT
  EMAIL
  ID
  ORGANIZATION_ID
  PRIMARY_DASHBOARD_ID
  UPDATED_AT
  USER_NAME
}

input UserOrderByInput {
  orderBy: UserOrderBy!
  desc: Boolean
}

"""An enumeration."""
enum TeamStrColumns {
  DESCRIPTION
  NAME
  SLUG
  THEME
}

"""An enumeration."""
enum TeamOrderBy {
  CREATED_AT
  CREATED_BY
  DEACTIVATED_AT
  DESCRIPTION
  FEATURED_METRIC_COLLECTION_ID
  ID
  NAME
  ORGANIZATION_ID
  PRIMARY_DASHBOARD_ID
  SLUG
  THEME
  UPDATED_AT
  VIEWS
}

input TeamOrderByInput {
  orderBy: TeamOrderBy!
  desc: Boolean
}

type ProtectedMetricFields {
  id: ID!
  createdAt: DateTime!
  organizationId: Int!
  name: String!
  userOwners: [MetricUserOwner]
  userOwnersWithDeactivated: [MetricUserOwner]
  userViewers: [MetricUserViewer]
  teamOwners: [MetricTeamOwner]
  teamViewers: [MetricTeamViewer]
  metricAnnotations: [MetricAnnotation]
  metricMetadata: MetricMetadata
  organization: Organization
  resolvedQuestions: [Question]
  unresolvedQuestions: [Question]
  userSubscribers: [MetricUserSubscription]
  metadata: GenericScalar
  params: GenericScalar
  totalQuestions: Int
  totalAnnotations: Int
  isNew: Boolean
  description: String
  valueFormat: String
  extraFields: JSONString
  metricType: Int
  displayNameWithLock: LockableParameter
  descriptionWithLock: LockableParameter
  valueFormatWithLock: LockableParameter
  increaseIsGoodWithLock: LockableParameter
  tierWithLock: LockableParameter
  isPrivateWithLock: LockableParameter
  unitWithLock: LockableParameter
  latestApproval: MetricApproval
  questions(searchStr: String, searchColumns: [QuestionStrColumns], orderBy: QuestionOrderBy, desc: Boolean, orderBys: [QuestionOrderByInput], pageNumber: Int, pageSize: Int): [Question]
  annotations(dimensions: [GMetricAnnotationDimensionInput], startDate: Date, endDate: Date, priorities: [Priority], searchStr: String, searchColumns: [AnnotationStrColumns], orderBy: AnnotationOrderBy, desc: Boolean, orderBys: [AnnotationOrderByInput], pageNumber: Int, pageSize: Int): [Annotation]
  totalRecentViews: Int
  totalRecentViewsForUser: Int
  userIsMetricOwner: Boolean
  userCanEdit: Boolean
  userIsSubscriber: Boolean
  dataSources(searchStr: String, searchColumns: [DataSourceVersionStrColumns], orderBy: DataSourceVersionOrderBy, desc: Boolean, orderBys: [DataSourceVersionOrderByInput], pageNumber: Int, pageSize: Int): [DataSourceVersion]
  dbtDataSources: [DataSourceVersion]
  totalDataSources: Int
  savedQueries(onlyPublicAndMine: Boolean, searchStr: String, searchColumns: [SavedQueryStrColumns], orderBy: SavedQueryOrderBy, desc: Boolean, orderBys: [SavedQueryOrderByInput], pageNumber: Int, pageSize: Int): [SavedQuery]
  totalSavedQueries(searchStr: String, searchColumns: [SavedQueryStrColumns], onlyPublicAndMine: Boolean): Int
  totalResolvedQuestions: Int
  totalUnresolvedQuestions: Int
  isAdditive: Boolean
  myAlertNotificationRules: [AlertNotificationRule]
  alertRules: [AlertRule]
  defaultTrim: Boolean
  defaultGranularity: TimeGranularity
  defaultDaysLimit: Int
  valueChangeAlert(id: Int!): Alert
  valueChangeAlerts(orderBy: AlertOrderBy, desc: Boolean, orderBys: [AlertOrderByInput], pageNumber: Int, pageSize: Int): [Alert]
  totalValueChangeAlerts: Int
  boards(searchStr: String, searchColumns: [BoardStrColumns], orderBy: BoardOrderBy, desc: Boolean, orderBys: [BoardOrderByInput], pageNumber: Int, pageSize: Int): [Board]
  totalBoards(searchStr: String, searchColumns: [BoardStrColumns], excludeNotViewed: Boolean): Int
}

type MetricAnnotation {
  id: ID!
  organizationId: Int!
  annotationId: Int!
  metricId: Int!
  createdAt: DateTime
  updatedAt: DateTime
  organization: Organization
  annotation: Annotation
  orgMetric: OrgMetric
  dimensions: [MetricAnnotationDimension]
}

type Annotation {
  id: ID!
  organizationId: Int!
  authorId: Int!
  title: String!
  text: String!
  expectedImpact: String!
  priority: String!
  dateStartedAt: String!
  dateEndedAt: String!
  notifiedAt: DateTime
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  orgMetrics: [OrgMetric]
  author: User
  organization: Organization
  userCanEdit: Boolean
  metricAnnotations: [MetricAnnotation]
}

type MetricAnnotationDimension {
  id: ID!
  metricAnnotationId: Int!
  dimensionName: String!
  valueHashes: [String]
}

type MetricMetadata {
  metricId: ID!
  description: String
  displayName: String
  tier: Int
  valueFormat: String
  increaseIsGood: Boolean
  unit: String
  descriptionLock: Boolean!
  displayNameLock: Boolean!
  tierLock: Boolean!
  valueFormatLock: Boolean!
  increaseIsGoodLock: Boolean!
  unitLock: Boolean!
  extraFields: JSONString
  isNew: Boolean!
  createdAt: DateTime
  createdBy: Int!
  updatedAt: DateTime
  updatedBy: Int!
  isPrivate: Boolean!
  isPrivateLock: Boolean!
  orgMetric: OrgMetric
  createdByUser: User
  updatedByUser: User
  tags: [MetricMetadataTag]
}

type MetricMetadataTag {
  id: ID!
  metricId: Int
  orgMetricTagId: Int
  createdAt: DateTime!
  locked: Boolean!
  metricMetadata: MetricMetadata
  orgTag: OrgTag
}

type OrgTag {
  id: ID!
  createdAt: DateTime!
  organizationId: Int!
  name: String!
  organization: Organization
  metricMetadataTags: [MetricMetadataTag]
}

type Question {
  id: ID!
  organizationId: Int!
  authorId: Int!
  resolved: Boolean
  resolvedBy: Int
  resolvedAt: DateTime
  text: String!
  priority: String!
  notifiedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  metricId: Int!
  organization: Organization
  replies(searchStr: String, searchColumns: [QuestionReplyStrColumns], orderBy: QuestionReplyOrderBy, desc: Boolean, orderBys: [QuestionReplyOrderByInput], pageNumber: Int, pageSize: Int): [QuestionReply]
  orgMetric: OrgMetric
  author: User
  resolvedByUser: User
  directedToUsers: [User]
  directedToTeams: [Team]
  totalLikes: Int
  likedByCurrentUser: Boolean
  totalReplies: Int
  currentUserIsAuthor: Boolean
  metricName: String
  userCanEdit: Boolean
}

type QuestionReply {
  id: ID!
  organizationId: Int!
  questionId: Int!
  authorId: Int!
  text: String!
  createdAt: DateTime
  updatedAt: DateTime
  organization: Organization
  author: User
  question: Question
  likedByCurrentUser: Boolean
  totalLikes: Int
}

"""An enumeration."""
enum QuestionReplyStrColumns {
  TEXT
}

"""An enumeration."""
enum QuestionReplyOrderBy {
  AUTHOR_ID
  CREATED_AT
  ID
  ORGANIZATION_ID
  QUESTION_ID
  TEXT
  UPDATED_AT
}

input QuestionReplyOrderByInput {
  orderBy: QuestionReplyOrderBy!
  desc: Boolean
}

type LockableParameter {
  isLocked: Boolean
  value: GenericScalar
}

type MetricApproval {
  id: ID!
  organizationId: Int!
  approverId: Int!
  approvedAt: DateTime
  metricId: Int!
  approver: User
  organization: Organization
}

"""An enumeration."""
enum QuestionStrColumns {
  PRIORITY
  TEXT
}

"""An enumeration."""
enum QuestionOrderBy {
  AUTHOR_ID
  CREATED_AT
  ID
  METRIC_ID
  NOTIFIED_AT
  ORGANIZATION_ID
  PRIORITY
  RESOLVED
  RESOLVED_AT
  RESOLVED_BY
  TEXT
  UPDATED_AT
}

input QuestionOrderByInput {
  orderBy: QuestionOrderBy!
  desc: Boolean
}

input GMetricAnnotationDimensionInput {
  dimensionName: String!
  valueHashes: [String]
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""An enumeration."""
enum Priority {
  NO_PRIORITY
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

"""An enumeration."""
enum AnnotationStrColumns {
  EXPECTED_IMPACT
  PRIORITY
  TEXT
  TITLE
}

"""An enumeration."""
enum AnnotationOrderBy {
  AUTHOR_ID
  CREATED_AT
  DATE_ENDED_AT
  DATE_STARTED_AT
  DELETED_AT
  EXPECTED_IMPACT
  ID
  NOTIFIED_AT
  ORGANIZATION_ID
  PRIORITY
  TEXT
  TITLE
  UPDATED_AT
}

input AnnotationOrderByInput {
  orderBy: AnnotationOrderBy!
  desc: Boolean
}

"""An enumeration."""
enum DataSourceVersionStrColumns {
  CONNECTION
  DBT_MODEL
  DESCRIPTION
  HASH
  NAME
  SQL_QUERY
  SQL_TABLE
}

"""An enumeration."""
enum DataSourceVersionOrderBy {
  CONNECTION
  CONSTRAINT
  CREATED_AT
  DATA_SOURCE_METADATA
  DBT_MODEL
  DESCRIPTION
  DIMENSIONS
  HASH
  ID
  IDENTIFIERS
  MEASURES
  MUTABILITY
  NAME
  ORGANIZATION_ID
  OWNERS
  SQL_QUERY
  SQL_TABLE
}

input DataSourceVersionOrderByInput {
  orderBy: DataSourceVersionOrderBy!
  desc: Boolean
}

"""An enumeration."""
enum SavedQueryStrColumns {
  MetricMetadata__DESCRIPTION
  MetricMetadata__DISPLAY_NAME
  MetricMetadata__UNIT
  MetricMetadata__VALUE_FORMAT
  OrgMetric__NAME
  TITLE
}

"""An enumeration."""
enum SavedQueryOrderBy {
  CHART_TYPE
  CREATED_AT
  CREATED_BY
  DELETED_AT
  ID
  IS_PRIVATE
  MetricMetadata__CREATED_AT
  MetricMetadata__CREATED_BY
  MetricMetadata__DESCRIPTION
  MetricMetadata__DESCRIPTION_LOCK
  MetricMetadata__DISPLAY_NAME
  MetricMetadata__DISPLAY_NAME_LOCK
  MetricMetadata__EXTRA_FIELDS
  MetricMetadata__INCREASE_IS_GOOD
  MetricMetadata__INCREASE_IS_GOOD_LOCK
  MetricMetadata__IS_NEW
  MetricMetadata__IS_PRIVATE
  MetricMetadata__IS_PRIVATE_LOCK
  MetricMetadata__METRIC_ID
  MetricMetadata__TIER
  MetricMetadata__TIER_LOCK
  MetricMetadata__UNIT
  MetricMetadata__UNIT_LOCK
  MetricMetadata__UPDATED_AT
  MetricMetadata__UPDATED_BY
  MetricMetadata__VALUE_FORMAT
  MetricMetadata__VALUE_FORMAT_LOCK
  ORGANIZATION_ID
  OWNER_TEAM_ID
  OrgMetric__CREATED_AT
  OrgMetric__ID
  OrgMetric__NAME
  OrgMetric__ORGANIZATION_ID
  QUERY_ID
  SERIALIZED_QUERY
  TITLE
  UPDATED_AT
}

input SavedQueryOrderByInput {
  orderBy: SavedQueryOrderBy!
  desc: Boolean
}

type AlertNotificationRule {
  id: ID!
  alertRuleId: Int
  type: AlertNotificationRuleType!
  channel: NotificationChannel!
  cadence: NotificationCadence!
  createdAt: DateTime!
  createdBy: Int
  updatedAt: DateTime!
  deletedAt: DateTime
  config: JSONString
  alertRule: AlertRule
  isSubscribed: Boolean
}

"""An enumeration."""
enum AlertNotificationRuleType {
  INDIVIDUAL
  SUBSCRIBER
  OWNER
  CUSTOM
}

"""An enumeration."""
enum NotificationChannel {
  IN_APP
  EMAIL
}

"""An enumeration."""
enum NotificationCadence {
  INSTANT
}

type AlertRule {
  id: ID!
  metricId: Int
  type: AlertRuleType!
  config: JSONString!
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int!
  deletedAt: DateTime
  deletedBy: Int
  metricUserSubscribers: [MetricUserSubscription]
  metricTeamOwners: [MetricTeamOwner]
  metricUserOwners: [MetricUserOwner]
  alertNotificationRules: [AlertNotificationRule]
  orgMetric: OrgMetric
  userCanEdit: Boolean
}

"""An enumeration."""
enum AlertRuleType {
  METADATA_NEW_QUESTION
  METADATA_NEW_ANNOTATION
  METADATA_NEW_SUBSCRIBERS
  METADATA_NEW_REPLY
  VALUE_CHANGE
  YOU_ARE_SUBSCRIBED
  METRIC_ACCESS_REQUESTED
  METRIC_ACCESS_REQUEST_RESPONDED
}

"""
For time dimensions, the smallest possible difference between two time values.

    Needed for calculating adjacency when merging 2 different time ranges.
    
"""
enum TimeGranularity {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

type Alert {
  id: ID!
  alertRuleId: Int!
  status: AlertStatus!
  data: JSONString
  annotationId: Int
  questionId: Int
  questionReplyId: Int
  detectedAt: DateTime!
  createdAt: DateTime!
  question: Question
  questionReply: QuestionReply
  annotation: Annotation
  alertRule: AlertRule
  requestingUser: User
}

"""An enumeration."""
enum AlertStatus {
  CREATED
  ACKNOWLEDGED
}

"""An enumeration."""
enum AlertOrderBy {
  ALERT_RULE_ID
  ANNOTATION_ID
  CREATED_AT
  DATA
  DETECTED_AT
  ID
  QUESTION_ID
  QUESTION_REPLY_ID
  STATUS
}

input AlertOrderByInput {
  orderBy: AlertOrderBy!
  desc: Boolean
}

type Board {
  id: ID!
  organizationId: Int
  title: String
  description: String
  createdBy: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  isPrivate: Boolean
  constraint: String
  startTime: String
  endTime: String
  latestXDays: Int
  owner: User
  userOwners(searchStr: String, searchColumns: [UserStrColumns], orderBy: UserOrderBy, desc: Boolean, orderBys: [UserOrderByInput], pageNumber: Int, pageSize: Int): [User]
  teamOwners(searchStr: String, searchColumns: [TeamStrColumns], orderBy: TeamOrderBy, desc: Boolean, orderBys: [TeamOrderByInput], pageNumber: Int, pageSize: Int): [Team]
  userCanEditContent: Boolean
  userCanDeactivate: Boolean
  userHasAccess: Boolean
  items: [BoardItem!]
  totalViews: Int
  myViews: Int
  totalFavorites: Int
  isFavoritedByUser(userId: Int): Boolean
  lastWeekViews: Int
  filteredViews(mineOnly: Boolean, searchStr: String, searchColumns: [BoardFilteredViewStrColumns], orderBy: BoardFilteredViewOrderBy, desc: Boolean, orderBys: [BoardFilteredViewOrderByInput], pageNumber: Int, pageSize: Int): [BoardFilteredView]
  totalFilteredViews(searchStr: String, searchColumns: [BoardFilteredViewStrColumns], excludeNotViewed: Boolean, mineOnly: Boolean): Int
  defaultFilter: BoardDefaultFilter
  filteredViewById(filteredViewId: Int!): BoardFilteredView
}

type BoardItem {
  id: ID!
  boardId: Int
  parentItemId: Int
  type: BoardItemType
  x: Int
  y: Int
  width: Int
  height: Int
  chartType: ChartType
  createdAt: DateTime
  updatedAt: DateTime
  board: Board
  orgMetric: OrgMetric
  savedQuery: SavedQuery
  config: GroupItemConfig
  markdown: MarkdownConfig
  children: [BoardItem]
}

"""
Board item types.

    Can be:
    - Group: has a title/description and is represents a section
    - Metric chart: displays data for a metric's default query
    - Saved query chart: displays data for a saved query
    - Markdown: displays markdown tile
    
"""
enum BoardItemType {
  GROUP
  METRIC_CHART
  SAVED_QUERY_CHART
  MARKDOWN
}

type GroupItemConfig {
  type: String
  title: String
  description: String
}

type MarkdownConfig {
  type: String
  content: String
}

type BoardFilteredView {
  id: ID!
  boardId: Int
  organizationId: Int
  createdBy: Int
  title: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  isPrivate: Boolean
  constraint: String
  startTime: String
  endTime: String
  timeGranularity: TimeGranularity
  latestXDays: Int
  board: Board
  creator: User
  where: Constraint
  userCanEditContent: Boolean
  userCanDeactivate: Boolean
  userHasAccess: Boolean
  totalViews: Int
  myViews: Int
  isFavoritedByUser(userId: Int): Boolean
}

"""Represents a where constraint used in a query."""
type Constraint {
  constraint: SingleConstraint
  And: [SingleConstraint!]
}

"""Actual `where` clauses to be applied"""
type SingleConstraint {
  constraintType: AtomicConstraintType
  dimensionName: String
  values: [GenericScalar]
  start: GenericScalar
  stop: GenericScalar
}

"""Current possible values for constraints"""
enum AtomicConstraintType {
  SET
  RANGE
}

"""An enumeration."""
enum BoardFilteredViewStrColumns {
  CONSTRAINT
  DESCRIPTION
  END_TIME
  START_TIME
  TITLE
}

"""An enumeration."""
enum BoardFilteredViewOrderBy {
  BOARD_ID
  CONSTRAINT
  CREATED_AT
  CREATED_BY
  DESCRIPTION
  END_TIME
  FAVORITES
  ID
  IS_PRIVATE
  LATEST_X_DAYS
  MY_VIEWS
  ORGANIZATION_ID
  RECENTLY_VIEWED
  START_TIME
  TIME_GRANULARITY
  TITLE
  UPDATED_AT
  VIEWS
}

input BoardFilteredViewOrderByInput {
  orderBy: BoardFilteredViewOrderBy!
  desc: Boolean
}

"""Object type for default filter"""
type BoardDefaultFilter {
  where: Constraint
  timeGranularity: TimeGranularity
  latestXDays: Int
  startTime: String
  endTime: String
}

"""An enumeration."""
enum BoardStrColumns {
  CONSTRAINT
  DESCRIPTION
  END_TIME
  START_TIME
  TITLE
}

"""An enumeration."""
enum BoardOrderBy {
  CONSTRAINT
  CREATED_AT
  CREATED_BY
  DELETED_AT
  DESCRIPTION
  END_TIME
  FAVORITES
  ID
  IS_PRIVATE
  LATEST_X_DAYS
  MY_VIEWS
  ORGANIZATION_ID
  RECENTLY_VIEWED
  START_TIME
  TIME_GRANULARITY
  TITLE
  UPDATED_AT
  VIEWS
}

input BoardOrderByInput {
  orderBy: BoardOrderBy!
  desc: Boolean
}

"""
Enum of governance owner/viewer request types for user_governance_request_status used for private metrics
"""
enum GovernanceRequestStatus {
  PENDING_OWNER
  DECLINED_OWNER
  NOT_YET_REQUESTED
  PENDING_VIEWER
  DECLINED_VIEWER
  USER_HAS_OWNER_ACCESS
  USER_HAS_VIEWER_ACCESS
}

"""An enumeration."""
enum OrgMetricStrColumns {
  DESCRIPTION
  DISPLAY_NAME
  MetricMetadata__DESCRIPTION
  MetricMetadata__DISPLAY_NAME
  MetricMetadata__UNIT
  MetricMetadata__VALUE_FORMAT
  NAME
  OrgTag__NAME
}

"""An enumeration."""
enum OrgMetricOrderBy {
  CREATED_AT
  DESCRIPTION
  DISPLAY_NAME
  ID
  MetricMetadata__CREATED_AT
  MetricMetadata__CREATED_BY
  MetricMetadata__DESCRIPTION
  MetricMetadata__DESCRIPTION_LOCK
  MetricMetadata__DISPLAY_NAME
  MetricMetadata__DISPLAY_NAME_LOCK
  MetricMetadata__EXTRA_FIELDS
  MetricMetadata__INCREASE_IS_GOOD
  MetricMetadata__INCREASE_IS_GOOD_LOCK
  MetricMetadata__IS_NEW
  MetricMetadata__IS_PRIVATE
  MetricMetadata__IS_PRIVATE_LOCK
  MetricMetadata__METRIC_ID
  MetricMetadata__TIER
  MetricMetadata__TIER_LOCK
  MetricMetadata__UNIT
  MetricMetadata__UNIT_LOCK
  MetricMetadata__UPDATED_AT
  MetricMetadata__UPDATED_BY
  MetricMetadata__VALUE_FORMAT
  MetricMetadata__VALUE_FORMAT_LOCK
  NAME
  ORGANIZATION_ID
  OrgTag__CREATED_AT
  OrgTag__ID
  OrgTag__NAME
  OrgTag__ORGANIZATION_ID
  VIEWS
}

input OrgMetricOrderByInput {
  orderBy: OrgMetricOrderBy!
  desc: Boolean
}

type MQLQuery {
  id: ID!
  organizationId: Int!
  mfQueryParamsId: Int!
  ppQueryParamsId: Int!
  startedAt: DateTime
  endedAt: DateTime
  createdBy: Int!
  status: MqlQueryStatus!
  cacheMode: CacheMode
  useResultCache: Boolean!
  allowDynamicCache: Boolean!
  tableId: String
  error: String
  errorTraceback: String
  userFriendlyErrorType: MqlQueryUserFriendlyErrorType
  createdAt: DateTime!
}

"""The status of queries submitted for execution in the query manager."""
enum MqlQueryStatus {
  PENDING
  RUNNING
  SUCCESSFUL
  FAILED
  UNHANDLED_EXCEPTION
  UNKNOWN
  KILLED
}

"""
Options for the SemanticLayer cache.

    Tables in a specified schema in the same data warehouse contain measure / dimension combinations that can be used to
    speed up queries for different measure / dimension combinations.
    
"""
enum CacheMode {
  READ
  READWRITE
  WRITE
  IGNORE
}

"""User friendly error types to return with MqlQuery"""
enum MqlQueryUserFriendlyErrorType {
  DB_ERROR
  UNABLE_TO_SATISFY_QUERY_ERROR
  UNKNOWN
}

type TeamView {
  id: ID!
  teamId: Int!
  userId: Int!
  organizationId: Int!
  createdAt: DateTime!
  organization: Organization
  team: Team
  user: User
}

type ApiKey {
  prefix: String!
  organizationId: Int!
  userId: Int!
  type: String!
  secretHash: String!
  createdAt: DateTime
  revokedAt: DateTime
  revokerId: Int
  lastUsedAt: DateTime
  scope: String
  user: User
  organization: Organization
  revoker: User
}

"""An enumeration."""
enum ApiKeyStrColumns {
  PREFIX
  SCOPE
  SECRET_HASH
  TYPE
}

"""An enumeration."""
enum ApiKeyOrderBy {
  CREATED_AT
  LAST_USED_AT
  ORGANIZATION_ID
  PREFIX
  REVOKED_AT
  REVOKER_ID
  SCOPE
  SECRET_HASH
  TYPE
  USER_ID
}

input ApiKeyOrderByInput {
  orderBy: ApiKeyOrderBy!
  desc: Boolean
}

type Notification {
  id: ID!
  alertId: Int!
  userId: Int!
  parentId: Int
  alertNotificationRuleId: Int!
  deliveredAt: DateTime
  createdAt: DateTime!
  alertNotificationRule: AlertNotificationRule
  alert: Alert
  children: [Notification]
  parent: Notification
  annotation: Annotation
  question: Question
  questionReply: QuestionReply
  numChildNotifications: Int
  subscriptionInviter: User
}

type Feature {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  retiredAt: DateTime
  organizations(searchStr: String, searchColumns: [OrganizationStrColumns], orderBy: OrganizationOrderBy, desc: Boolean, orderBys: [OrganizationOrderByInput], pageNumber: Int, pageSize: Int): [Organization]
  users(searchStr: String, searchColumns: [UserStrColumns], orderBy: UserOrderBy, desc: Boolean, orderBys: [UserOrderByInput], pageNumber: Int, pageSize: Int): [User]
  totalOrganizations: Int
  totalUsers: Int
}

"""An enumeration."""
enum OrganizationStrColumns {
  LOGO_URL
  MQL_SERVER_LOGS
  NAME
  PRIMARY_CONFIG_BRANCH
  PRIMARY_CONFIG_REPO
  SOURCE_CONTROL_URL
}

"""An enumeration."""
enum OrganizationOrderBy {
  CREATED_AT
  DEACTIVATED_AT
  ID
  IS_HOSTED
  LOGO_URL
  MQL_SERVER_LOGS
  NAME
  PRIMARY_CONFIG_BRANCH
  PRIMARY_CONFIG_REPO
  SOURCE_CONTROL_URL
  TYPE
  UPDATED_AT
}

input OrganizationOrderByInput {
  orderBy: OrganizationOrderBy!
  desc: Boolean
}

type OrgMqlServer {
  id: ID!
  organizationId: Int!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  url: String!
  isOrgDefault: Boolean
  configSecret: String
  dwEngine: DWEngine
  deploymentStatus: DeploymentStatus
  serverMetadataId: Int
  heartbeats: [MqlHeartbeat]
  organization: Organization
  latestHeartbeat: MqlHeartbeat
  dwConfig: DataWarehouseConfig
}

"""An enumeration."""
enum DWEngine {
  REDSHIFT
  POSTGRESQL
  MYSQL
  SNOWFLAKE
  BIGQUERY
  DATABRICKS
}

"""Enums to represent the status of the mql server deployment"""
enum DeploymentStatus {
  PAUSED
  DEPLOY
  NEVER
}

type MqlHeartbeat {
  id: ID!
  organizationId: Int!
  userId: Int!
  createdAt: DateTime
  versionSha: String!
  status: String!
  details: JSONString
  mqlServerId: Int
  mqlServer: OrgMqlServer
  user: User
  org: Organization
}

"""GQL object to represent configs for a given mql data warehouse."""
type DataWarehouseConfig {
  host: String
  username: String
  database: String
  port: Int
  schema: String
  query: String
  dialect: String
  isPasswordSet: Boolean
  httpPath: String
}

"""An enumeration."""
enum OrgMqlServerStrColumns {
  CONFIG_SECRET
  NAME
  URL
}

"""An enumeration."""
enum OrgMqlServerOrderBy {
  CONFIG_SECRET
  CREATED_AT
  DEPLOYMENT_STATUS
  DW_ENGINE
  ID
  IS_ORG_DEFAULT
  NAME
  ORGANIZATION_ID
  SERVER_METADATA_ID
  UPDATED_AT
  URL
}

input OrgMqlServerOrderByInput {
  orderBy: OrgMqlServerOrderBy!
  desc: Boolean
}

"""An enumeration."""
enum MetricTier {
  ONE
  TWO
  THREE
}

"""An enumeration."""
enum MetricType {
  MEASURE_PROXY
  RATIO
  EXPR
  CUMULATIVE
  DERIVED
}

type OrgPref {
  id: ID!
  organizationId: Int!
  prefKey: String!
  prefValue: String!
  createdAt: DateTime
  updatedAt: DateTime
  organization: Organization
}

"""An enumeration."""
enum OrgPrefStrColumns {
  PREF_KEY
  PREF_VALUE
}

"""An enumeration."""
enum OrgPrefOrderBy {
  CREATED_AT
  ID
  ORGANIZATION_ID
  PREF_KEY
  PREF_VALUE
  UPDATED_AT
}

input OrgPrefOrderByInput {
  orderBy: OrgPrefOrderBy!
  desc: Boolean
}

type MetricView {
  organizationId: Int!
  userId: ID!
  metricId: ID!
  createdAt: DateTime!
  organization: Organization
}

type Integrations {
  slack: SlackIntegration
}

type SlackIntegration {
  conversations(includeArchived: Boolean = false, nameSearch: String = "", pageSize: Int = 10, cursor: String): SlackConversationConnection
}

type SlackConversationConnection {
  nodes: [SlackConversation!]
  cursor: String
}

type SlackConversation {
  id: String
  name: String
  type: SlackConversationType
  isArchived: Boolean
  numMembers: Int
  topic: String
  purpose: String
}

enum SlackConversationType {
  PUBLIC_CHANNEL
  PRIVATE_CHANNEL
  DM
  GROUP_DM
}

"""An enumeration."""
enum ModelStrColumns {
  EXECUTION_CONTEXT
  GIT_BRANCH
  GIT_COMMIT
  GIT_REPO
}

"""An enumeration."""
enum ModelOrderBy {
  CREATED_AT
  EXECUTION_CONTEXT
  GIT_BRANCH
  GIT_COMMIT
  GIT_IS_DIRTY
  GIT_REPO
  ID
  IS_CURRENT
  IS_DBT_MODEL
  IS_VALIDATION
  ORGANIZATION_ID
  UPLOADER_ID
}

input ModelOrderByInput {
  orderBy: ModelOrderBy!
  desc: Boolean
}

"""Filters supported for metric search."""
type MetricFilter {
  filterName: String
  displayName: String
  values: [MetricFilterValue]
}

"""Values available for given metric filter option."""
type MetricFilterValue {
  name: String
  value: GenericScalar
}

"""Enum for source control providers."""
enum SourceControl {
  GITHUB
  GITLAB
  BITBUCKET
}

type IntegrationConfigurationTableau {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  site: String
  useServerVersion: Boolean!
  serverAddress: String!
  organization: Organization
}

type IntegrationConfigurationDbtCloud {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  accountId: String
  projectId: String
  jobId: String
  isFullyConfigured: String
  organization: Organization
}

type Integration {
  id: ID!
  organizationId: Int!
  type: IntegrationType!
  status: String!
  createdAt: DateTime!
  createdBy: Int!
  deactivatedAt: DateTime
}

"""An enumeration."""
enum IntegrationType {
  TABLEAU_WEB_DATA_CONNECTOR
  TABLEAU_MATERIALIZATIONS
  DBT
  GOOGLE_SHEETS
  EXCEL_2013
  EXCEL_365
  MODE
  MYSQL_INTERFACE
  POWERBI
  SLACK
}

"""An enumeration."""
enum IntegrationStrColumns {
  STATUS
}

"""An enumeration."""
enum IntegrationOrderBy {
  CREATED_AT
  CREATED_BY
  DEACTIVATED_AT
  ID
  ORGANIZATION_ID
  STATUS
  TYPE
}

input IntegrationOrderByInput {
  orderBy: IntegrationOrderBy!
  desc: Boolean
}

type Invite {
  id: ID!
  organizationId: Int!
  email: String!
  expiresAt: DateTime!
  redeemedAt: DateTime
  invitedBy: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  isExpired: Boolean
}

"""An enumeration."""
enum InviteStrColumns {
  EMAIL
}

"""An enumeration."""
enum InviteOrderBy {
  CREATED_AT
  EMAIL
  EXPIRES_AT
  ID
  INVITED_BY
  ORGANIZATION_ID
  REDEEMED_AT
  UPDATED_AT
}

input InviteOrderByInput {
  orderBy: InviteOrderBy!
  desc: Boolean
}

"""An enumeration."""
enum GIntegrationType {
  TABLEAU_WEB_DATA_CONNECTOR
  TABLEAU_MATERIALIZATIONS
  DBT
  GOOGLE_SHEETS
  EXCEL_2013
  EXCEL_365
  MODE
  MYSQL_INTERFACE
  POWERBI
  SLACK
}

type CurrentModelHistory {
  id: ID!
  organizationId: Int!
  modelId: Int!
  madeCurrentAt: DateTime!
  model: Model
  organization: Organization
}

"""An enumeration."""
enum FeatureStrColumns {
  NAME
}

"""An enumeration."""
enum FeatureOrderBy {
  CREATED_AT
  ID
  NAME
  RETIRED_AT
  UPDATED_AT
}

input FeatureOrderByInput {
  orderBy: FeatureOrderBy!
  desc: Boolean
}

"""Wrapper to contain queries related to transform settings & configs."""
type TransformConfig {
  auth0IdleSessionLifetimeHours: Int
  latestTermsOfService: TermsOfServiceVersion
}

type TermsOfServiceVersion {
  id: ID!
  pdfUrl: String!
  createdAt: DateTime!
}

type MqlServerHealthItem {
  name: String!
  status: String!
  errorMessage: String
}

"""GQL Input object for Snowflake connection details."""
input SnowflakeConnectionInput {
  host: String!
  username: String!
  password: String!
  database: String!
  schema: String!
  warehouse: String!
  role: String
}

"""GQL Input object for Redshift connection details."""
input RedshiftConnectionInput {
  host: String!
  username: String!
  password: String!
  database: String!
  schema: String!
  port: Int!
}

"""GQL Input object for BigQuery connection details."""
input BigQueryConnectionInput {
  password: String!
  schema: String!
}

"""GQL Input object for Databricks connection details."""
input DatabricksConnectionInput {
  host: String!
  httpPath: String!
  httpPathForTableRenames: String
  password: String!
  schema: String!
}

type AlertRuleDefinition {
  """The name used internally to identify the alert rule"""
  ruleType: String!

  """The human-readable name of the alert rule"""
  name: String!

  """The further explanation of the alert rule"""
  description: String!

  """The supported config parameters of the alert rule"""
  config: [AlertRuleDefinitionParameter]!
}

type AlertRuleDefinitionParameter {
  """The name of the parameter"""
  name: String!

  """The human-readable description of the parameter"""
  description: String!

  """The type of the parameter """
  valueType: ParameterType!

  """The options for enum type parameters"""
  values: [String]
}

"""Supported parameter types for an alert rule config"""
enum ParameterType {
  FLOAT
  INT
  STRING
  BOOL
  ENUM
}

"""
Base mutation object exposed by GraphQL.

Mutation names will be converted from snake_case to camelCase automatically
(e.g., log_mql_log will show up as logMqlLog in the GQL schema).
"""
type Mutation {
  revokeApiKeyTest(prefix: String!): ApiKey
  createOrganizationTest(name: String!, primaryConfigRepo: String, primaryConfigBranch: String, mqlServerUrl: String, sourceControlUrl: String, mqlServerLogs: String, isHosted: Boolean, dwEngine: String, mqlServerName: String, requireMfa: Boolean, allowMfaRememberBrowser: Boolean, allowedEmailDomains: [String], orgType: GOrgType): Organization
  setOrgMqlServerConfigSecret(clientConfigSecretId: String, mqlServerId: Int): SetOrgMqlServerConfigSecretId
  setIntegrationConfigurationTableau(configuration: GIntegrationConfigurationTableauInput): SetIntegrationConfigurationTableau
  setIntegrationConfigurationDbtCloud(configuration: GIntegrationConfigurationDbtCloudInput): SetIntegrationConfigurationDbtCloud
  removeIntegrationConfigurationTableau: RemoveIntegrationConfigurationTableau
  sendMqlHeartbeat(mqlServerId: Int, sha: String!): SendMqlHeartbeat
  createAnnotationTest(dateEndedAt: Date!, dateStartedAt: Date!, expectedImpact: String!, metricInputs: [GMetricAnnotationInput]!, priority: Priority!, text: String!, title: String!): CreateAnnotation
  updateAnnotationTest(annotationId: Int!, dateEndedAt: Date, dateStartedAt: Date, expectedImpact: String, metricInputs: [GMetricAnnotationInput], priority: Priority, text: String, title: String): UpdateAnnotation
  removeAnnotation(annotationId: Int!): RemoveAnnotation

  """
  Update user's email in DB and auth0. Auth0 needs to match for user to login with new email.
  """
  updateUserEmail(email: String!, userId: Int): UpdateUserEmail

  """
  Create API Key for given user. If no user_id passed, create key for authenticated user.
  """
  createApiKeyTest(userId: Int): CreateApiKey

  """
  Create SCIM API Key for given user. If no user_id passed, create key for authenticated user.
  """
  createScimApiKeyTest(userId: Int): CreateSCIMApiKey

  """
  Create User for given org. If no org_id passed, create user in org of authenticated user.
  """
  createUserTest(email: String!, isOrgOwner: Boolean, organizationId: Int, userName: String!): CreateUser

  """Add role to user in DB and Auth0."""
  addRoleToUserTest(role: String!, userId: Int!): AddRoleToUser

  """Remove role from user in DB and Auth0."""
  removeRoleFromUserTest(role: String!, userId: Int!): RemoveRoleFromUser

  """Deactivate user in DB and Auth0."""
  deactivateUserTest(userId: Int!): DeactivateUser

  """Reactivate user in DB and Auth0."""
  reactivateUserTest(userId: Int!): ReactivateUser

  """Update fields on a User."""
  updateUserTest(avatarUrl: String, email: String, id: ID!, primaryDashboardId: ID, userName: String): UpdateUser
  setUserPreference(prefKey: String!, prefValue: String!, userId: ID): SetUserPreference

  """Stores hosted MQL Server config using AWS Secrets Manager."""
  updateMqlServerConfig(dwPassword: String, modeCreds: String, mqlServerId: Int, tfdApiKey: String): UpdateMqlServerConfig

  """Removes hosted MQL Server config using AWS Secrets Manager."""
  revokeMqlServerConfig(mqlServerId: Int): RevokeMqlServerConfig

  """
  Stores environment variables required to spin up the MQL server into AWS Secrets Manager.
  """
  setMqlServerEnvConfig(bigQueryConnectionDetails: BigQueryConnectionInput, databricksConnectionDetails: DatabricksConnectionInput, deployServer: Boolean, redshiftConnectionDetails: RedshiftConnectionInput, snowflakeConnectionDetails: SnowflakeConnectionInput): SetMqlServerEnvConfig
  featuresCreate(name: String!): Feature
  featuresUpdate(id: ID!, name: String, retireFeature: Boolean): Feature
  featuresAddOrgs(featureId: ID!, organizationIds: [ID]!): Feature
  featuresAddUsers(featureId: ID!, userIds: [ID]!): Feature
  featuresRemoveAccess(featureId: ID!, userIds: [ID], organizationIds: [ID]): Feature
  questionsCreateReply(questionId: ID!, text: String!): Question
  questionsUpdateReply(questionReplyId: Int!, text: String!): Question
  questionsDeleteReply(questionReplyId: Int!): Question
  questionRepliesLike(id: ID!): QuestionReply
  questionsLike(id: ID!): Question
  questionRepliesUnlike(id: ID!): QuestionReply
  questionsUnlike(id: ID!): Question
  questionsCreate(text: String!, priority: String!, metricId: ID!, directedToUsers: [ID], directedToTeams: [ID]): Question
  questionsDelete(id: ID!): Question
  questionsEdit(id: ID!, text: String, priority: String, directedToTeams: [ID], directedToUsers: [ID], resolved: Boolean): Question
  orgMqlServerUpdate(id: ID!, name: String, url: String, isOrgDefault: Boolean, configSecret: String, dwEngine: String, deploymentStatus: String): OrgMqlServer
  orgMqlServerDelete(id: ID!): OrgMqlServer
  orgMqlServerCreate(organizationId: ID, name: String!, url: String!, isOrgDefault: Boolean, configSecret: String, dwEngine: String, deploymentStatus: String): OrgMqlServer
  teamsCreate(name: String!, slug: String!, organizationId: ID, description: String, theme: String, regularMemberUserIds: [ID], teamAdminUserIds: [ID]): Team
  teamsUpdate(id: ID!, name: String, slug: String, description: String, theme: String, primaryDashboardId: Int, featuredMetricCollectionId: Int, deactivate: Boolean): Team
  teamsAddMember(teamId: ID!, regularMemberUserIds: [ID], teamAdminUserIds: [ID]): Team
  teamsRemoveMember(teamId: ID!, userId: ID!): Team
  teamSetMemberAdminStatus(teamMemberId: ID!, isTeamAdmin: Boolean!): Team
  teamsAssignAsMetricOwner(teamId: ID!, metricIds: [ID]): Team
  teamsRemoveAsMetricOwner(teamId: ID!, metricIds: [ID]): Team
  organizationsUpdate(id: ID!, name: String, logoUrl: String, primaryConfigRepo: String, primaryConfigBranch: String, sourceControlUrl: String, mqlServerLogs: String, isHosted: Boolean, orgType: GOrgType): Organization
  organizationsCreateSharedSlack(orgId: ID!, emails: [String]!): Organization
  organizationsCreateSamlConnection(companyName: String!, signInUrl: String!, signingCertificate: String!, allowedEmailDomains: [String]!, orgId: ID): Organization
  organizationsDisableOkta(orgId: ID): Organization
  organizationsSetTierTooltip(organizationId: ID!, tooltip: String!, tier: MetricTier!): Organization
  organizationsSetMfaPrefs(organizationId: ID!, mfaPref: MFAPref!): Organization
  organizationsSetPref(organizationId: ID!, prefKey: String!, prefValue: String!): Organization
  organizationsDeletePref(organizationId: ID!, prefKey: String!): Organization
  organizationsSetAllowedEmailDomains(organizationId: ID!, allowedEmailDomains: [String]!): Organization
  organizationsDeactivate(orgId: ID!, reactivate: Boolean = false): Organization
  orgMetricsApprove(metricId: ID!): OrgMetric
  metricsLogView(metricId: ID!): MetricView
  teamsLogView(teamId: ID!): TeamView
  orgMetricsAddUserOwners(metricId: Int!, userIds: [Int], ownerType: GOwnerType): OrgMetric
  orgMetricsRequestUserOwnership(metricId: Int!): OrgMetric
  orgMetricsDeclineUserOwnershipRequest(metricId: ID!, userId: Int!): OrgMetric
  orgMetricsApproveUserOwnershipRequest(metricId: Int!, userId: Int!): OrgMetric
  orgMetricsRemoveUserOwners(metricId: Int!, userIds: [Int], ownerType: GOwnerType): OrgMetric
  orgMetricsAddUserViewers(metricId: Int!, userIds: [Int], ownerType: GOwnerType): OrgMetric
  orgMetricsRequestUserViewership(metricId: Int!): OrgMetric
  orgMetricsDeclineUserViewershipRequest(metricId: Int!, userId: Int!): OrgMetric
  orgMetricsApproveUserViewershipRequest(metricId: Int!, userId: Int!): OrgMetric
  orgMetricsRemoveUserViewers(metricId: Int!, userIds: [Int], ownerType: GOwnerType): OrgMetric
  orgMetricsAddTeamOwners(metricId: Int!, teamIds: [Int], ownerType: GOwnerType): OrgMetric
  orgMetricsRequestTeamOwnership(metricId: Int!, teamId: Int!): OrgMetric
  orgMetricsDeclineTeamOwnershipRequest(metricId: Int!, teamId: Int!): OrgMetric
  orgMetricsApproveTeamOwnershipRequest(metricId: Int!, teamId: Int!): OrgMetric
  orgMetricsRemoveTeamOwners(metricId: Int!, teamIds: [Int], ownerType: GOwnerType): OrgMetric
  orgMetricsAddTeamViewers(metricId: Int!, teamIds: [Int], ownerType: GOwnerType): OrgMetric
  orgMetricsRequestTeamViewership(metricId: Int!, teamId: Int!): OrgMetric
  orgMetricsDeclineTeamViewershipRequest(metricId: Int!, teamId: Int!): OrgMetric
  orgMetricsApproveTeamViewershipRequest(metricId: Int!, teamId: Int!): OrgMetric
  orgMetricsRemoveTeamViewers(metricId: Int!, teamIds: [Int], ownerType: GOwnerType): OrgMetric
  orgMetricsAddDescription(metricId: ID!, description: String!): OrgMetric
  orgMetricsUpdateMetadata(metricId: ID!, description: String, tier: Int, displayName: String, valueFormat: String, increaseIsGood: Boolean, defaultTrim: Boolean, defaultGranularity: TimeGranularity, defaultDaysLimit: Int, extraFields: JSONString, isPrivate: Boolean, unit: String, tags: [String]): OrgMetric
  savedQueryCreate(title: String!, serializedQuery: GenericScalar!, metricIds: [ID], ownerTeamId: ID, isPrivate: Boolean): SavedQuery
  savedQueryUpdate(id: ID!, title: String, createdBy: Int, ownerTeamId: Int, serializedQuery: GenericScalar, metricIds: [ID], isPrivate: Boolean): SavedQuery
  createSavedQuery(title: String!, queryId: Int!, isPrivate: Boolean, chartType: GChartType): SavedQuery
  updateSavedQuery(id: Int!, title: String, createdBy: Int, isPrivate: Boolean, queryId: Int, chartType: GChartType): SavedQuery
  savedQueryDeactivate(id: ID!): SavedQuery
  sendInvites(emails: [String]!, organizationId: ID): Organization
  acceptTermsOfService(userId: ID!, versionId: ID!): User
  createTermsOfService(pdfUrl: String!): TermsOfServiceVersion
  orgMetricsCreateSubscription(metricId: ID!, userIds: [Int]): OrgMetric
  orgMetricsRemoveSubscription(metricId: ID!, userIds: [Int]): OrgMetric
  markNotificationsDelivered(notificationIds: [ID]!): Boolean
  addAlertRule(metricId: ID!, alertRuleType: GAlertRuleType!, config: JSONString, useDefaultNotifRules: Boolean): AlertRule
  addAlertNotificationRule(alertRuleId: ID!, alertNotificationRuleType: GAlertNotificationRuleType!, channel: GNotificationChannel!, config: JSONString): AlertNotificationRule
  updateAlertRule(alertRuleId: ID!, metricId: ID!, alertRuleType: GAlertRuleType!, config: JSONString): AlertRule
  removeAlertRule(alertRuleId: ID!): AlertRule
  removeAlertNotificationRule(alertNotificationRuleId: ID!): AlertNotificationRule
  addAlertNotificationRuleForCurrentUser(alertRuleId: ID!, channel: GNotificationChannel!, config: JSONString): AlertNotificationRule
  removeAlertNotificationRuleForCurrentUser(alertNotificationRuleId: ID!): AlertNotificationRule
  resubscribeAlertNotificationRuleForCurrentUser(alertNotificationRuleId: ID!): AlertNotificationRule
  slackSendMetric(destinationId: String!, message: SlackMetricMessageInput!): SlackSendMetricResult
  slackCreateOrgInstallation(oauthCode: String!): SlackCreateOrgInstallationResult
  slackDeleteOrgInstallation: SlackDeleteOrgInstallationResult
  setDbUtcTimezoneOffsetHours(organizationId: ID!, dbUtcTimezoneOffsetHours: Int!): Organization
  setDbArrearsHours(organizationId: ID!, dbArrearsHours: Int!): Organization
  createIntegration(organizationId: ID!, integrationType: GIntegrationType!, status: GIntegrationStatus!): Integration
  updateIntegration(integrationId: ID!, status: GIntegrationStatus, active: Boolean): Integration
  dismissOnboardingCards(userId: Int!): Boolean
  generateOrgSignUpToken(email: String!, orgType: GOrgType!, expirationHours: Int): String
  testNewOnboardingSlackMessage(message: String!): String
  testCurrentOnboardingSlackMessage: String
  updateOnboardingSlackMessage(message: String!): Boolean
  unsubscribeFromNotificationChannel(channel: GNotificationChannel!, userId: Int!): User
  resubscribeToNotificationChannel(channel: GNotificationChannel!, userId: Int!): User
  bulkSubscribeAlertRules(channels: [GNotificationChannel]!, alertRuleTypes: [GAlertRuleType]!, userId: Int!, metricId: Int): User
  bulkUnsubscribeAlertRules(channels: [GNotificationChannel]!, alertRuleTypes: [GAlertRuleType]!, userId: Int!, metricId: Int): User
  createTransformServiceUser(orgId: ID!): User
  boardsCreate(title: String!, description: String, isPrivate: Boolean, userOwnerIds: [Int], teamOwnerIds: [Int]): Board
  boardsUpdate(id: Int!, title: String, description: String, isPrivate: Boolean, items: [BoardItemInput], userOwnerIds: [Int], teamOwnerIds: [Int]): Board
  boardsDeactivate(id: Int!): Board
  boardsAddSavedQuery(savedQueryId: Int!, boardIds: [Int]!): [Board]
  boardsLogView(boardId: ID!): BoardView
  boardsAddUserOwners(boardId: ID!, userIds: [ID]): Board
  boardsRemoveUserOwners(boardId: ID!, userIds: [ID]): Board
  boardsAddTeamOwners(boardId: ID!, teamIds: [ID]): Board
  boardsRemoveTeamOwners(boardId: ID!, teamIds: [ID]): Board
  boardsFavorite(boardId: ID!): Board
  boardsUnfavorite(boardId: ID!): Board
  boardsUpdateDefaultFilters(boardId: Int!, where: ConstraintInput, startTime: String, endTime: String, timeGranularity: TimeGranularity, latestXDays: Int): Board
  boardsFilteredViewCreate(boardId: Int!, title: String!, description: String, isPrivate: Boolean, where: ConstraintInput, startTime: String, endTime: String, timeGranularity: TimeGranularity, latestXDays: Int): BoardFilteredView
  boardsFilteredViewUpdate(filteredViewId: Int!, title: String!, description: String, isPrivate: Boolean, where: ConstraintInput, startTime: String, endTime: String, timeGranularity: TimeGranularity, latestXDays: Int): BoardFilteredView
  boardsFilteredViewDelete(filteredViewId: Int!): BoardFilteredView
  boardsFilteredViewChangeVisability(filteredViewId: Int!, isPrivate: Boolean!): BoardFilteredView
  boardsFilteredViewLogView(filteredViewId: Int!): BoardFilteredViewView
  boardsFilteredViewFavorite(filteredViewId: ID!): BoardFilteredView
  boardsFilteredViewUnfavorite(filteredViewId: ID!): BoardFilteredView
  testSlackMessage(message: String!, fromUsername: String, fromImgUrl: String): String
  sendSlackMessages(message: String!, channelNames: [String]!, fromUsername: String, fromImgUrl: String): String
}

"""An enumeration."""
enum GOrgType {
  PAID
  TRIAL
  INTERNAL
  TEST
}

type SetOrgMqlServerConfigSecretId {
  mqlServer: OrgMqlServer
}

type SetIntegrationConfigurationTableau {
  site: String
  useServerVersion: Boolean
  serverAddress: String
}

input GIntegrationConfigurationTableauInput {
  patName: String!
  patValue: String!
  site: String
  useServerVersion: Boolean!
  serverAddress: String!
}

type SetIntegrationConfigurationDbtCloud {
  accountId: String
  projectId: String
  jobId: String
  isFullyConfigured: Boolean
}

input GIntegrationConfigurationDbtCloudInput {
  secretAccessToken: String
  accountId: String
  projectId: String
  jobId: String
}

type RemoveIntegrationConfigurationTableau {
  success: Boolean
}

type SendMqlHeartbeat {
  success: Boolean
  heartbeat: MqlHeartbeat
}

type CreateAnnotation {
  annotation: Annotation
}

input GMetricAnnotationInput {
  metricId: Int!
  dimensions: [GMetricAnnotationDimensionInput]
}

type UpdateAnnotation {
  annotation: Annotation
}

type RemoveAnnotation {
  ok: Boolean
}

"""
Update user's email in DB and auth0. Auth0 needs to match for user to login with new email.
"""
type UpdateUserEmail {
  user: User
}

"""
Create API Key for given user. If no user_id passed, create key for authenticated user.
"""
type CreateApiKey {
  createdKeyFullString: String
  createdKeyPrefix: String
}

"""
Create SCIM API Key for given user. If no user_id passed, create key for authenticated user.
"""
type CreateSCIMApiKey {
  createdKeyFullString: String
  createdKeyPrefix: String
}

"""
Create User for given org. If no org_id passed, create user in org of authenticated user.
"""
type CreateUser {
  user: User
}

"""Add role to user in DB and Auth0."""
type AddRoleToUser {
  user: User
}

"""Remove role from user in DB and Auth0."""
type RemoveRoleFromUser {
  user: User
}

"""Deactivate user in DB and Auth0."""
type DeactivateUser {
  user: User
}

"""Reactivate user in DB and Auth0."""
type ReactivateUser {
  user: User
}

"""Update fields on a User."""
type UpdateUser {
  user: User
}

type SetUserPreference {
  user: User
}

"""Stores hosted MQL Server config using AWS Secrets Manager."""
type UpdateMqlServerConfig {
  config: MqlServerConfig
}

"""MQL Server configuration for hosted MQL Servers"""
type MqlServerConfig {
  """MQL Server ID as stored in the Backend"""
  mqlServerId: Int

  """
  Transform Data API Key. _Note:_ Stored securely using AWS Secrets Manager.
  """
  tfdApiKey: String

  """
  Password used to access the Data Warehouse. _Note:_ Stored securely using AWS Secrets Manager.
  """
  dwPassword: String

  """
  Mode bridge connection config. _Note:_ Stored securely using AWS Secrets Manager.
  """
  modeCreds: String
}

"""Removes hosted MQL Server config using AWS Secrets Manager."""
type RevokeMqlServerConfig {
  success: Boolean
}

"""
Stores environment variables required to spin up the MQL server into AWS Secrets Manager.
"""
type SetMqlServerEnvConfig {
  success: Boolean
}

input MFAPref {
  requireMfa: Boolean!
  allowMfaRememberBrowser: Boolean!
}

"""An enumeration."""
enum GOwnerType {
  business
  technical
}

"""An enumeration."""
enum GChartType {
  LINE_CHART
  AREA_CHART_STACKED
  AREA_CHART_SHARE_OF
  BAR_CHART
  BAR_CHART_STACKED
  BAR_CHART_SHARE_OF
  BIG_NUMBER
  TABLE
  DUAL_AXIS_LINE_CHART
}

"""An enumeration."""
enum GAlertRuleType {
  METADATA_NEW_QUESTION
  METADATA_NEW_ANNOTATION
  METADATA_NEW_SUBSCRIBERS
  METADATA_NEW_REPLY
  VALUE_CHANGE
  YOU_ARE_SUBSCRIBED
  METRIC_ACCESS_REQUESTED
  METRIC_ACCESS_REQUEST_RESPONDED
}

"""An enumeration."""
enum GAlertNotificationRuleType {
  INDIVIDUAL
  SUBSCRIBER
  OWNER
  CUSTOM
}

"""An enumeration."""
enum GNotificationChannel {
  IN_APP
  EMAIL
}

type SlackSendMetricResult {
  ok: Boolean
}

input SlackMetricMessageInput {
  locale: Locale!
  description: String!
  query: MetricQueryInput!
}

enum Locale {
  en_US
}

input MetricQueryInput {
  metrics: [String!]!
  dimensions: [String!]!
  where: ConstraintInput
  whereConstraint: String
  timeConstraint: String
  startTime: String
  endTime: String
  timeGranularity: String
  daysLimit: Int
  pctChange: PercentChange
  trimIncompletePeriods: Boolean
  includeDateBoundaries: Boolean
  maxDimensionValues: Int
}

"""
GQL container class for inputs to allow for and/or wrappers on the `where` clause
"""
input ConstraintInput {
  And: [SingleConstraintInput!]
  constraint: SingleConstraintInput
}

"""Input structure for GQL query constraints."""
input SingleConstraintInput {
  constraintType: AtomicConstraintType
  dimensionName: String
  values: [GenericScalar]
  start: GenericScalar
  stop: GenericScalar
}

enum PercentChange {
  DOD
  WOW
  MOM
  QOQ
  YOY
  DATE_RANGE
}

type SlackCreateOrgInstallationResult {
  ok: Boolean
}

type SlackDeleteOrgInstallationResult {
  ok: Boolean
}

"""An enumeration."""
enum GIntegrationStatus {
  REQUESTED
  COMPLETED
}

input BoardItemInput {
  config: BoardItemConfigInput!
  x: Int
  y: Int
  width: Int
  height: Int
}

"""
Input union for board items. Exactly one of the fields must be non-null
"""
input BoardItemConfigInput {
  markdown: MarkdownConfigInput
  savedQuery: SavedQueryItemConfigInput
  metric: MetricItemConfigInput
  group: GroupItemConfigInput
}

input MarkdownConfigInput {
  content: String
}

input SavedQueryItemConfigInput {
  savedQueryId: Int!
  chartType: GChartType
}

input MetricItemConfigInput {
  metricId: Int!
  chartType: GChartType
}

input GroupItemConfigInput {
  title: String
  description: String
  children: [BoardItemInput!]
}

type BoardView {
  organizationId: Int!
  userId: ID!
  boardId: ID!
  createdAt: DateTime!
}

type BoardFilteredViewView {
  organizationId: Int!
  userId: ID!
  filteredViewId: ID!
  createdAt: DateTime!
}
